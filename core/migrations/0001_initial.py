# Generated by Django 5.2.3 on 2025-08-04 15:46

import core.models
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Anlage1Config',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enable_q1', models.BooleanField(default=True)),
                ('enable_q2', models.BooleanField(default=True)),
                ('enable_q3', models.BooleanField(default=True)),
                ('enable_q4', models.BooleanField(default=True)),
                ('enable_q5', models.BooleanField(default=True)),
                ('enable_q6', models.BooleanField(default=True)),
                ('enable_q7', models.BooleanField(default=True)),
                ('enable_q8', models.BooleanField(default=True)),
                ('enable_q9', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Anlage1 Konfiguration',
            },
        ),
        migrations.CreateModel(
            name='Anlage1Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num', models.PositiveSmallIntegerField(unique=True)),
                ('text', models.TextField()),
                ('enabled', models.BooleanField(default=True)),
                ('parser_enabled', models.BooleanField(default=True)),
                ('llm_enabled', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['num'],
            },
        ),
        migrations.CreateModel(
            name='Anlage2Config',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('singleton_enforcer', models.BooleanField(default=True, editable=False, unique=True)),
                ('enforce_subquestion_override', models.BooleanField(default=False, help_text="Wenn aktiviert, wird eine Hauptfunktion automatisch als 'technisch vorhanden' markiert, wenn mindestens eine ihrer Unterfragen als 'technisch vorhanden' bewertet wird.")),
                ('parser_mode', models.CharField(choices=[('auto', 'Automatisch'), ('table_only', 'Nur Tabellen'), ('text_only', 'Nur Text'), ('exact_only', 'Nur Exakt')], default='auto', max_length=20)),
                ('parser_order', models.JSONField(default=core.models.Anlage2Config.default_parser_order, help_text='Reihenfolge der zu verwendenden Parser.')),
                ('text_technisch_verfuegbar_true', models.JSONField(default=list, help_text='Phrasen für technisch verfügbar = Ja')),
                ('text_technisch_verfuegbar_false', models.JSONField(default=list, help_text='Phrasen für technisch verfügbar = Nein')),
                ('text_einsatz_telefonica_true', models.JSONField(default=list, help_text='Phrasen für Einsatz bei Telefónica = Ja')),
                ('text_einsatz_telefonica_false', models.JSONField(default=list, help_text='Phrasen für Einsatz bei Telefónica = Nein')),
                ('text_zur_lv_kontrolle_true', models.JSONField(default=list, help_text='Phrasen für zur LV-Kontrolle = Ja')),
                ('text_zur_lv_kontrolle_false', models.JSONField(default=list, help_text='Phrasen für zur LV-Kontrolle = Nein')),
                ('text_ki_beteiligung_true', models.JSONField(default=list, help_text='Phrasen für KI-Beteiligung = Ja')),
                ('text_ki_beteiligung_false', models.JSONField(default=list, help_text='Phrasen für KI-Beteiligung = Nein')),
            ],
            options={
                'verbose_name': 'Anlage2 Konfiguration',
            },
        ),
        migrations.CreateModel(
            name='Anlage2Function',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('detection_phrases', models.JSONField(blank=True, default=dict)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Anlage3ParserRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_name', models.CharField(choices=[('name', 'Name der Auswertung'), ('beschreibung', 'Beschreibung'), ('zeitraum', 'Zeitraum'), ('art', 'Art der Auswertung')], max_length=50)),
                ('aliases', models.JSONField(blank=True, default=list)),
                ('ordering', models.PositiveIntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Anlage 3 Parser Regel',
                'verbose_name_plural': 'Anlage 3 Parser Regeln',
                'ordering': ['ordering', 'id'],
            },
        ),
        migrations.CreateModel(
            name='Anlage4Config',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('table_columns', models.JSONField(blank=True, default=list)),
                ('regex_patterns', models.JSONField(blank=True, default=list)),
                ('negative_patterns', models.JSONField(blank=True, default=list)),
                ('prompt_template', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Anlage4 Konfiguration',
            },
        ),
        migrations.CreateModel(
            name='Anlage4ParserConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('table_columns', models.JSONField(blank=True, default=list)),
                ('delimiter_phrase', models.CharField(default='Name der (\\d+|\\w+)\\. Auswertung', help_text='Regulärer Ausdruck, der den Beginn einer neuen Auswertung markiert.', max_length=255)),
                ('gesellschaften_phrase', models.CharField(default='Gesellschaften, in denen die Auswertung verwendet wird:', help_text="Die exakte Phrase, die dem Wert für 'Gesellschaften' vorangeht.", max_length=255)),
                ('fachbereiche_phrase', models.CharField(default='Fachbereiche, in denen die Auswertung eingesetzt wird:', help_text="Die exakte Phrase, die dem Wert für 'Fachbereiche' vorangeht.", max_length=255)),
                ('name_aliases', models.JSONField(blank=True, default=list)),
                ('gesellschaft_aliases', models.JSONField(blank=True, default=list)),
                ('fachbereich_aliases', models.JSONField(blank=True, default=list)),
                ('negative_patterns', models.JSONField(blank=True, default=list)),
                ('prompt_plausibility', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Anlage4 Parser Konfiguration',
            },
        ),
        migrations.CreateModel(
            name='AntwortErkennungsRegel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('regel_name', models.CharField(max_length=100)),
                ('erkennungs_phrase', models.CharField(max_length=200)),
                ('actions_json', models.JSONField(blank=True, default=list, help_text='Aktionen als Liste von Objekten.')),
                ('regel_anwendungsbereich', models.CharField(choices=[('Hauptfunktion', 'Hauptfunktion'), ('Unterfrage', 'Unterfrage')], default='Hauptfunktion', max_length=20)),
                ('prioritaet', models.IntegerField(default=0)),
            ],
            options={
                'ordering': ['prioritaet'],
            },
        ),
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(unique=True)),
                ('name', models.CharField(help_text="Einzigartiger Name des Bereichs, z.B. 'work' oder 'personal'", max_length=100, unique=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='area_images/')),
            ],
            options={
                'ordering': ['slug'],
            },
        ),
        migrations.CreateModel(
            name='BVProject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=50, verbose_name='Titel')),
                ('beschreibung', models.TextField(blank=True, verbose_name='Beschreibung')),
                ('project_prompt', models.TextField(blank=True, verbose_name='Projekt-Prompt')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Erstellt am')),
                ('classification_json', models.JSONField(blank=True, default=dict, null=True, verbose_name='Klassifizierung')),
                ('gutachten_file', models.FileField(blank=True, upload_to='gutachten', verbose_name='Gutachten')),
                ('gutachten_function_note', models.TextField(blank=True, verbose_name='LLM-Hinweis Gutachten')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='FormatBParserRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=20, unique=True)),
                ('target_field', models.CharField(choices=[('technisch_verfuegbar', 'Technisch verfügbar'), ('einsatz_telefonica', 'Einsatz Telefónica'), ('zur_lv_kontrolle', 'Zur LV-Kontrolle'), ('ki_beteiligung', 'KI-Beteiligung')], max_length=50)),
                ('ordering', models.PositiveIntegerField(default=0)),
            ],
            options={
                'ordering': ['ordering', 'key'],
            },
        ),
        migrations.CreateModel(
            name='LLMConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('default_model', models.CharField(blank=True, max_length=100)),
                ('gutachten_model', models.CharField(blank=True, max_length=100)),
                ('anlagen_model', models.CharField(blank=True, max_length=100)),
                ('vision_model', models.CharField(blank=True, max_length=100)),
                ('available_models', models.JSONField(blank=True, default=list, null=True)),
                ('models_changed', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'LLM Konfiguration',
            },
        ),
        migrations.CreateModel(
            name='LLMRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Ein kurzer, wiedererkennbarer Name für die Rolle.', max_length=100, unique=True)),
                ('role_prompt', models.TextField(help_text='Der eigentliche System-Prompt, der die Persona und Anweisungen für die KI definiert.')),
                ('is_default', models.BooleanField(default=False, help_text='Soll diese Rolle als globaler Standard verwendet werden, wenn einem Prompt keine spezifische Rolle zugewiesen ist?')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('key', models.CharField(max_length=50, unique=True)),
                ('ordering', models.PositiveIntegerField(default=0)),
                ('is_default', models.BooleanField(default=False)),
                ('is_done_status', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['ordering', 'name'],
            },
        ),
        migrations.CreateModel(
            name='SoftwareType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SupervisionStandardNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note_text', models.CharField(max_length=100, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('display_order', models.PositiveIntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Standardnotiz Supervision',
                'verbose_name_plural': 'Standardnotizen Supervision',
                'ordering': ['display_order', 'note_text'],
            },
        ),
        migrations.CreateModel(
            name='ZweckKategorieA',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('beschreibung', models.TextField()),
            ],
            options={
                'verbose_name': 'Zweck Kategorie A',
                'verbose_name_plural': 'Zwecke Kategorie A',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Anlage1QuestionVariant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='variants', to='core.anlage1question')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Anlage2ColumnHeading',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_name', models.CharField(choices=[('technisch_vorhanden', 'Technisch vorhanden'), ('einsatz_bei_telefonica', 'Einsatz bei Telefónica'), ('zur_lv_kontrolle', 'Zur LV-Kontrolle'), ('ki_beteiligung', 'KI-Beteiligung')], max_length=50)),
                ('text', models.CharField(max_length=200)),
                ('config', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='headers', to='core.anlage2config')),
            ],
            options={
                'ordering': ['field_name', 'id'],
            },
        ),
        migrations.CreateModel(
            name='Anlage2SubQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('frage_text', models.TextField()),
                ('detection_phrases', models.JSONField(blank=True, default=dict)),
                ('funktion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.anlage2function')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='BVProjectFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('anlage_nr', models.PositiveSmallIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6')], verbose_name='Anlage Nr')),
                ('upload', models.FileField(upload_to='bv_files', verbose_name='Upload')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('parser_mode', models.CharField(blank=True, choices=[('auto', 'Automatisch'), ('table_only', 'Nur Tabellen'), ('text_only', 'Nur Text'), ('exact_only', 'Nur Exakt')], default='', help_text='Spezifischer Parser-Modus für diese Anlage.', max_length=20)),
                ('parser_order', models.JSONField(blank=True, default=list, help_text='Reihenfolge der Parser für diese Anlage.')),
                ('version', models.PositiveIntegerField(default=1)),
                ('is_active', models.BooleanField(default=True)),
                ('text_content', models.TextField(blank=True, verbose_name='Textinhalt')),
                ('analysis_json', models.JSONField(blank=True, default=dict, null=True, verbose_name='Analyse')),
                ('manual_analysis_json', models.JSONField(blank=True, default=dict, null=True)),
                ('manual_comment', models.TextField(blank=True, verbose_name='Kommentar')),
                ('anlage6_note', models.TextField(blank=True, verbose_name='Prüfnotiz')),
                ('question_review', models.JSONField(blank=True, default=dict, null=True)),
                ('gap_summary', models.TextField(blank=True, null=True)),
                ('gap_notiz', models.TextField(blank=True, null=True)),
                ('verification_json', models.JSONField(blank=True, default=dict, help_text='Ergebnis der KI-gestützten Verifizierung der Funktionen.', null=True)),
                ('verification_task_id', models.CharField(blank=True, help_text='ID des laufenden Verifizierungstasks.', max_length=50)),
                ('processing_status', models.CharField(choices=[('PENDING', 'Ausstehend'), ('PROCESSING', 'In Bearbeitung'), ('COMPLETE', 'Abgeschlossen'), ('FAILED', 'Fehlgeschlagen')], default='PENDING', max_length=20)),
                ('manual_reviewed', models.BooleanField(default=False, verbose_name='Manuell geprüft')),
                ('verhandlungsfaehig', models.BooleanField(default=False, verbose_name='Verhandlungsfähig')),
                ('anlage4_config', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.anlage4config')),
                ('anlage4_parser_config', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.anlage4parserconfig')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='core.bvprojectfile')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='anlagen', to='core.bvproject')),
            ],
            options={
                'ordering': ['anlage_nr'],
            },
        ),
        migrations.CreateModel(
            name='Anlage3Metadata',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200)),
                ('beschreibung', models.TextField(blank=True)),
                ('zeitraum', models.CharField(blank=True, max_length=100)),
                ('art', models.CharField(blank=True, max_length=100)),
                ('project_file', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='anlage3meta', to='core.bvprojectfile')),
            ],
            options={
                'verbose_name': 'Anlage 3 Metadaten',
                'verbose_name_plural': 'Anlage 3 Metadaten',
            },
        ),
        migrations.CreateModel(
            name='BVSoftware',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.bvproject')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='FunktionsErgebnis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quelle', models.CharField(max_length=20)),
                ('technisch_verfuegbar', models.BooleanField(null=True)),
                ('einsatz_bei_telefonica', models.BooleanField(null=True)),
                ('zur_lv_kontrolle', models.BooleanField(null=True)),
                ('ki_beteiligung', models.BooleanField(null=True)),
                ('ki_beteiligt_begruendung', models.TextField(blank=True, null=True)),
                ('begruendung', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('anlage_datei', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='funktions_ergebnisse', to='core.bvprojectfile')),
                ('funktion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.anlage2function')),
                ('subquestion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.anlage2subquestion')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='GroupAreaAccess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('area', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.area')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.group')),
            ],
            options={
                'unique_together': {('group', 'area')},
            },
        ),
        migrations.AddField(
            model_name='area',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='Gruppen mit Zugriff auf diesen Bereich.', related_name='areas', through='core.GroupAreaAccess', to='auth.group'),
        ),
        migrations.CreateModel(
            name='GroupTileAccess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.group')),
            ],
        ),
        migrations.CreateModel(
            name='BVProjectStatusHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('changed_at', models.DateTimeField(auto_now_add=True)),
                ('projekt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='status_history', to='core.bvproject')),
                ('status', models.ForeignKey(default=core.models.get_default_project_status, on_delete=django.db.models.deletion.PROTECT, to='core.projectstatus')),
            ],
            options={
                'ordering': ['changed_at'],
            },
        ),
        migrations.AddField(
            model_name='bvproject',
            name='status',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='projects', to='core.projectstatus'),
        ),
        migrations.CreateModel(
            name='Prompt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('text', models.TextField()),
                ('use_system_role', models.BooleanField(default=True, help_text='Wenn aktiviert, wird diesem Prompt der globale oder zugewiesene Rollen-Prompt vorangestellt. Deaktivieren für einfache Abfragen, die eine strikte, kurze Antwort erfordern.')),
                ('use_project_context', models.BooleanField(default=True, help_text='Soll diesem Prompt automatisch der Projekt-Kontext vorangestellt werden?')),
                ('role', models.ForeignKey(blank=True, help_text='Optionale, spezifische Rolle für diesen Prompt. Überschreibt die globale Standard-Rolle.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.llmrole')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Recording',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('audio_file', models.FileField(upload_to=core.models.recording_upload_path)),
                ('transcript_file', models.FileField(blank=True, upload_to=core.models.transcript_upload_path)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('duration', models.FloatField(blank=True, null=True)),
                ('excerpt', models.TextField(blank=True)),
                ('bereich', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.area')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SoftwareKnowledge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('software_name', models.CharField(max_length=100)),
                ('is_known_by_llm', models.BooleanField(default=False)),
                ('description', models.TextField(blank=True)),
                ('last_checked', models.DateTimeField(blank=True, null=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='softwareknowledge', to='core.bvproject')),
            ],
            options={
                'ordering': ['software_name'],
                'unique_together': {('project', 'software_name')},
            },
        ),
        migrations.CreateModel(
            name='Gutachten',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('software_knowledge', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='gutachten', to='core.softwareknowledge')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Tile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(unique=True)),
                ('name', models.CharField(max_length=100)),
                ('url_name', models.CharField(max_length=100)),
                ('icon', models.CharField(blank=True, max_length=50)),
                ('description', models.CharField(blank=True, max_length=200)),
                ('image', models.ImageField(blank=True, null=True, upload_to='tile_images/')),
                ('areas', models.ManyToManyField(help_text='Die Bereiche, in denen diese Kachel angezeigt wird.', related_name='tiles', to='core.area')),
                ('groups', models.ManyToManyField(blank=True, related_name='tiles', through='core.GroupTileAccess', to='auth.group')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='core.tile', verbose_name='Übergeordnete Kachel')),
                ('permission', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='auth.permission', verbose_name='Benötigte Berechtigung')),
            ],
            options={
                'ordering': ['slug'],
            },
        ),
        migrations.AddField(
            model_name='grouptileaccess',
            name='tile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.tile'),
        ),
        migrations.CreateModel(
            name='UserTileAccess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.tile')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'tile')},
            },
        ),
        migrations.AddField(
            model_name='tile',
            name='users',
            field=models.ManyToManyField(related_name='tiles', through='core.UserTileAccess', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Anlage5Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sonstige_zwecke', models.TextField(blank=True)),
                ('project_file', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='anlage5review', to='core.bvprojectfile')),
                ('found_purposes', models.ManyToManyField(blank=True, to='core.zweckkategoriea')),
            ],
            options={
                'verbose_name': 'Anlage 5 Review',
                'verbose_name_plural': 'Anlage 5 Reviews',
            },
        ),
        migrations.CreateModel(
            name='AnlagenFunktionsMetadaten',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gap_summary', models.TextField(blank=True)),
                ('gap_notiz', models.TextField(blank=True, null=True)),
                ('supervisor_notes', models.TextField(blank=True, null=True)),
                ('is_negotiable', models.BooleanField(default=False)),
                ('is_negotiable_manual_override', models.BooleanField(blank=True, null=True)),
                ('funktion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.anlage2function')),
                ('subquestion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.anlage2subquestion')),
                ('anlage_datei', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.bvprojectfile')),
            ],
            options={
                'ordering': ['funktion__name'],
                'unique_together': {('anlage_datei', 'funktion', 'subquestion')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='grouptileaccess',
            unique_together={('group', 'tile')},
        ),
        migrations.CreateModel(
            name='UserAreaAccess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('area', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.area')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'area')},
            },
        ),
    ]
