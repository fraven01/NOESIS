# Generated by Django 5.2.3 on 2025-07-31 20:03

import core.models
import django.db.migrations.operations.special
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


def grant_superuser_all_permissions(apps, schema_editor):
    """Weist allen Superusern sämtliche Berechtigungen zu."""
    User = apps.get_model("auth", "User")
    Permission = apps.get_model("auth", "Permission")

    all_permissions = list(Permission.objects.all())
    superusers = User.objects.filter(is_superuser=True)
    for user in superusers:
        user.user_permissions.set(all_permissions)


def create_initial_formatb_rules(apps, schema_editor):
    """Legt die Standard-Parser-Regeln für Format B an."""
    FormatBParserRule = apps.get_model("core", "FormatBParserRule")
    FormatBParserRule.objects.bulk_create(
        [
            FormatBParserRule(
                key="tv", target_field="technisch_verfuegbar", ordering=1
            ),
            FormatBParserRule(key="tel", target_field="einsatz_telefonica", ordering=2),
            FormatBParserRule(key="lv", target_field="zur_lv_kontrolle", ordering=3),
            FormatBParserRule(key="ki", target_field="ki_beteiligung", ordering=4),
        ]
    )


def copy_to_manual(apps, schema_editor):
    Result = apps.get_model("core", "Anlage2FunctionResult")
    for res in Result.objects.all():
        res.manual_result = {
            "technisch_vorhanden": res.technisch_verfuegbar,
            "ki_beteiligung": res.ki_beteiligung,
        }
        res.save(update_fields=["manual_result"])


def noop(apps, schema_editor):
    pass


def seed_zweckkategoriea(apps, schema_editor):
    """Füllt die Tabelle ZweckKategorieA mit Standardwerten."""
    ZweckKategorieA = apps.get_model("core", "ZweckKategorieA")
    ZweckKategorieA.objects.bulk_create(
        [
            ZweckKategorieA(
                beschreibung="Leistungsvergleiche von Mitarbeitern oder Mitarbeitergruppen (wenn eine der Gruppen nicht größer als 5 Personen ist)."
            ),
            ZweckKategorieA(
                beschreibung="Abgleich von Verhalten oder Leistung eines Mitarbeiters oder einer Mitarbeitergruppe (wenn eine der Gruppen nicht größer als 5 Personen ist) mit bestimmten Durchschnittsleistungen von Mitarbeitergruppen."
            ),
            ZweckKategorieA(
                beschreibung="Messung der Qualität oder Quantität der Leistung eines Mitarbeiters oder von Kenntnissen oder Fähigkeiten, um das Ergebnis der Messung mit einem Sollwert oder Vorgaben (z. B. betriebliche Ziele) abzugleichen."
            ),
            ZweckKategorieA(beschreibung="Messung der Auslastung von Mitarbeitern."),
            ZweckKategorieA(
                beschreibung="Feststellung der vergangenheitsbezogenen Termine bzw. Erreichbarkeit oder persönlichen Verfügbarkeit eines Mitarbeiters."
            ),
            ZweckKategorieA(
                beschreibung="Feststellung der Termine bzw. Erreichbarkeit oder persönlichen Verfügbarkeit des Mitarbeiters in Echtzeit."
            ),
            ZweckKategorieA(
                beschreibung="Feststellung der zukünftigen Termine bzw. Erreichbarkeit oder persönlichen Verfügbarkeit des Mitarbeiters in Echtzeit."
            ),
            ZweckKategorieA(
                beschreibung="Erstellung von Bewertungen von Leistung oder Verhalten von Mitarbeitern (z. B. Zeugnisse, Scorecards etc.)."
            ),
            ZweckKategorieA(
                beschreibung="Identifikation von Mitarbeitern nach bestimmten Skills (Kenntnisse, Fähigkeiten und Erfahrungen)."
            ),
            ZweckKategorieA(beschreibung="Erstellung von Persönlichkeitsprofilen."),
            ZweckKategorieA(
                beschreibung="Ermittlung des aktuellen Arbeitsortes/Aufenthaltsortes."
            ),
        ]
    )


def add_prompts(apps, schema_editor):
    Prompt = apps.get_model("core", "Prompt")
    prompts = [
        (
            "anlage2_subquestion_justification_check",
            " [SYSTEM]\nDu bist Fachautor*in für IT-Mitbestimmung (§87 Abs. 1 Nr. 6 BetrVG).\n"
            "Antworte Unterfrage prägnant in **maximal zwei Sätzen** (insgesamt ≤ 65 Wörter) und erfülle folgende Regeln :\n\n"
            "1. Starte Teil A mit „Typischer Zweck: …“  \n2. Starte Teil B mit „Kontrolle: Ja, …“ oder „Kontrolle: Nein, …“.  \n"
            "3. Nenne exakt die übergebene Funktion/Eigenschaft, erfinde nichts dazu.  \n"
            "4. Erkläre knapp *warum* mit der Funktion die Unterfrage (oder warum nicht) eine Leistungs- oder Verhaltenskontrolle möglich ist.  \n"
            "5. Verwende Alltagssprache, keine Marketing-Floskeln.\n\n"
            ' [USER]\nSoftware: {{software_name}}  \nFunktion/Eigenschaft: {{function_name}}  \nUnterfrage: "{{subquestion_text}}"',
        ),
        (
            "anlage2_ai_verification_prompt",
            "Gib eine kurze Begründung, warum die Funktion '{function_name}' (oder die Unterfrage '{subquestion_text}') der Software '{software_name}' eine KI-Komponente beinhaltet oder beinhalten kann, insbesondere im Hinblick auf die Verarbeitung unstrukturierter Daten oder nicht-deterministischer Ergebnisse.",
        ),
    ]
    for name, text in prompts:
        Prompt.objects.update_or_create(name=name, defaults={"text": text})


def seed_anlage3_parser_rules(apps, schema_editor):
    """Erzeugt die Standardregeln für Anlage 3."""
    Anlage3ParserRule = apps.get_model("core", "Anlage3ParserRule")
    Anlage3ParserRule.objects.create(
        field_name="name",
        aliases=["name der auswertung", "name", "bezeichnung"],
        ordering=1,
    )
    Anlage3ParserRule.objects.create(
        field_name="beschreibung",
        aliases=["beschreibung", "kurzbeschreibung"],
        ordering=2,
    )
    Anlage3ParserRule.objects.create(
        field_name="zeitraum",
        aliases=["zeitraum", "auswertungszeitraum"],
        ordering=3,
    )
    Anlage3ParserRule.objects.create(
        field_name="art",
        aliases=["art der auswertung", "auswertungsart", "typ"],
        ordering=4,
    )


def migrate_actions_json_forwards(apps, schema_editor):
    Rule = apps.get_model("core", "AntwortErkennungsRegel")
    for rule in Rule.objects.all():
        if not rule.actions_json and getattr(rule, "ziel_feld", None):
            rule.actions_json = {rule.ziel_feld: rule.wert}
            rule.save(update_fields=["actions_json"])


def migrate_actions_json_noop(apps, schema_editor):
    pass


def add_prompt(apps, schema_editor):
    Prompt = apps.get_model("core", "Prompt")
    Prompt.objects.update_or_create(
        name="anlage2_subquestion_possibility_check",
        defaults={
            "text": (
                "Im Kontext der Funktion '{function_name}' der Software '{software_name}': "
                "Ist die spezifische Anforderung '{subquestion_text}' technisch möglich? "
                "Antworte nur mit 'Ja', 'Nein' oder 'Unsicher'."
            )
        },
    )


def actions_json_list_forwards(apps, schema_editor):
    Rule = apps.get_model("core", "AntwortErkennungsRegel")
    for rule in Rule.objects.all():
        data = rule.actions_json
        if isinstance(data, dict):
            rule.actions_json = [{"field": k, "value": v} for k, v in data.items()]
            rule.save(update_fields=["actions_json"])


def actions_json_list_backwards(apps, schema_editor):
    Rule = apps.get_model("core", "AntwortErkennungsRegel")
    for rule in Rule.objects.all():
        data = rule.actions_json
        if isinstance(data, list):
            out = {}
            for obj in data:
                field = obj.get("field")
                if not field:
                    continue
                out[field] = obj.get("value")
            rule.actions_json = out
            rule.save(update_fields=["actions_json"])


def set_anlage_datei_for_existing_results(apps, schema_editor):
    FunktionsErgebnis = apps.get_model("core", "FunktionsErgebnis")
    BVProjectFile = apps.get_model("core", "BVProjectFile")
    for res in FunktionsErgebnis.objects.all():
        pf = (
            BVProjectFile.objects.filter(projekt=res.projekt, anlage_nr=2)
            .order_by("id")
            .first()
        )
        if pf:
            res.anlage_datei_id = pf.id
            res.save(update_fields=["anlage_datei"])


def add_gap_prompts(apps, schema_editor):
    Prompt = apps.get_model("core", "Prompt")
    prompts = [
        (
            "gap_summary_internal",
            '**INTERNE GAP-ANALYSE**\n\n**Funktion/Unterfrage:** "{funktion} {unterfrage}"\n\n**Konflikt:**\n- Dokumenten-Analyse: {dokument_wert}\n- KI-Einschätzung: {ki_wert}\n- Manuelle Bewertung durch Prüfer: {manueller_wert}\n\n**Ursprüngliche KI-Begründung:**\n{ki_begruendung}\n\n**Deine Aufgabe:**\nFormuliere eine prägnante, technische Zusammenfassung des Gaps für die interne Akte. Begründe den Kern des Konflikts zwischen den Bewertungen.',
        ),
        (
            "gap_communication_external",
            '**RÜCKFRAGE AN FACHBEREICH**\n\n**Funktion/Unterfrage:** "{funktion}"\n\n**Kontext der automatisierten Prüfung:**\nUnsere automatisierte Analyse der eingereichten Unterlagen hat für diese Funktion ein Gap ergeben. Eine automatisierte Einschätzung kommt zu dem Ergebnis "{ki_wert}".\n\n**Deine Aufgabe:**\nFormuliere eine freundliche und kollaborative Rückfrage an den Fachbereich. Erkläre höflich, dass es hier eine Abweichung zur manuellen Prüfung gibt und bitte um eine kurze Überprüfung oder zusätzliche Erläuterung der Funktion, um das Missverständnis aufzuklären. Füge keine Einleitung oder Abschlußworte hinzu.',
        ),
    ]
    for name, text in prompts:
        Prompt.objects.update_or_create(
            name=name, defaults={"text": text, "use_system_role": True}
        )


def remove_gap_prompts(apps, schema_editor):
    Prompt = apps.get_model("core", "Prompt")
    Prompt.objects.filter(
        name__in=["gap_summary_internal", "gap_communication_external"]
    ).delete()


def add_default_notes(apps, schema_editor):
    Note = apps.get_model("core", "SupervisionStandardNote")
    defaults = [
        "Kein mitbest. relevanter Einsatz",
        "Lizenz-/kostenpflichtig",
        "Geplant, aber nicht aktiv",
    ]
    for order, text in enumerate(defaults, start=1):
        Note.objects.get_or_create(note_text=text, defaults={"display_order": order})


def remove_default_notes(apps, schema_editor):
    Note = apps.get_model("core", "SupervisionStandardNote")
    Note.objects.filter(
        note_text__in=[
            "Kein mitbest. relevanter Einsatz",
            "Lizenz-/kostenpflichtig",
            "Geplant, aber nicht aktiv",
        ]
    ).delete()


def forwards_func(apps, schema_editor):
    """Löscht den ungenutzten Prompt."""
    Prompt = apps.get_model("core", "Prompt")
    Prompt.objects.filter(name="anlage2_ai_involvement_justification").delete()


def reverse_func(apps, schema_editor):
    """Stellt den gelöschten Prompt wieder her."""
    Prompt = apps.get_model("core", "Prompt")
    text = (
        "Gib eine kurze Begründung, warum die Funktion '{function_name}' "
        "(oder die Unterfrage '{subquestion_text}') der Software '{software_name}' "
        "eine KI-Komponente beinhaltet oder beinhalten kann, insbesondere im "
        "Hinblick auf die Verarbeitung unstrukturierter Daten oder nicht-deterministischer "
        "Ergebnisse."
    )
    Prompt.objects.update_or_create(
        name="anlage2_ai_involvement_justification", defaults={"text": text}
    )


class Migration(migrations.Migration):
    """replaces = [('core', '0001_initial'), ('core', '0003_delete_anlage2globalphrase'), ('core', '0004_tile_parent_tile_permission'), ('core', '0005_auto_20250701_2038'), ('core', '0006_formatbparserrule'), ('core', '0007_anlage2function_detection_phrases_and_more'), ('core', '0008_antworterkennungsregel_and_more'), ('core', '0009_anlage4_config'), ('core', '0010_anlage4_parser_config'), ('core', '0011_update_parser_config_fields'), ('core', '0012_add_alias_fields'), ('core', '0013_remove_anlage4parserconfig_prompt_extraction'), ('core', '0014_add_project_prompt'), ('core', '0015_anlage2functionresult_gap_summary_and_more'), ('core', '0016_merge_20250711_1208'), ('core', '0017_anlage2functionresult_result_fields'), ('core', '0018_bvprojectfile_verification_task_id'), ('core', '0019_zweckkategoriea'), ('core', '0020_anlage2config_text_einsatz_telefonica_false_and_more'), ('core', '0021_anlage2functionresult_einsatz_bei_telefonica_and_more'), ('core', '0022_add_gap_notiz_field'), ('core', '0023_add_regel_anwendungsbereich'), ('core', '0024_anlage2functionresult_is_negotiable_override'), ('core', '0025_rename_negotiable_override'), ('core', '0026_anlage5review'), ('core', '0027_add_anlage2_prompts'), ('core', '0028_anlage6_note'), ('core', '0029_add_subquestion_to_result'), ('core', '0030_anlage3_metadata'), ('core', '0031_anlage3_parser_rule'), ('core', '0032_antworterkennungsregel_actions_json_and_more'), ('core', '0033_migrate_actions_json'), ('core', '0034_add_subquestion_possibility_prompt'), ('core', '0035_actions_json_list'), ('core', '0036_add_funktions_ergebnis'), ('core', '0037_add_anlage_datei_begruendung'), ('core', '0038_rename_anlage2functionresult'), ('core', '0039_alter_anlage2config_parser_order'), ('core', '0040_gap_prompts_and_fields'), ('core', '0041_add_supervisor_notes'), ('core', '0042_supervision_standard_note'), ('core', '0043_bvprojectfile_versioning'), ('core', '0044_bvprojectfile_processing_status'), ('core', '0045_add_prompt_project_context'), ('core', '0046_bvprojectfile_created_at'), ('core', '0047_remove_involvement_justification_prompt'), ('core', '0048_funktionsergebnis_ki_beteiligt_begruendung'), ('core', '0049_add_gap_fields_to_projectfile'), ('core', '0050_remove_funktionsergebnis_gap_begruendung_extern_and_more')]"""

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("auth", "__latest__"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Anlage1Config",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("enable_q1", models.BooleanField(default=True)),
                ("enable_q2", models.BooleanField(default=True)),
                ("enable_q3", models.BooleanField(default=True)),
                ("enable_q4", models.BooleanField(default=True)),
                ("enable_q5", models.BooleanField(default=True)),
                ("enable_q6", models.BooleanField(default=True)),
                ("enable_q7", models.BooleanField(default=True)),
                ("enable_q8", models.BooleanField(default=True)),
                ("enable_q9", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name": "Anlage1 Konfiguration",
            },
        ),
        migrations.CreateModel(
            name="Anlage1Question",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("num", models.PositiveSmallIntegerField(unique=True)),
                ("text", models.TextField()),
                ("enabled", models.BooleanField(default=True)),
                ("parser_enabled", models.BooleanField(default=True)),
                ("llm_enabled", models.BooleanField(default=True)),
            ],
            options={
                "ordering": ["num"],
            },
        ),
        migrations.CreateModel(
            name="Anlage2Config",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "singleton_enforcer",
                    models.BooleanField(default=True, editable=False, unique=True),
                ),
                (
                    "enforce_subquestion_override",
                    models.BooleanField(
                        default=False,
                        help_text="Wenn aktiviert, wird eine Hauptfunktion automatisch als 'technisch vorhanden' markiert, wenn mindestens eine ihrer Unterfragen als 'technisch vorhanden' bewertet wird.",
                    ),
                ),
                (
                    "parser_mode",
                    models.CharField(
                        choices=[
                            ("auto", "Automatisch"),
                            ("table_only", "Nur Tabellen"),
                            ("text_only", "Nur Text"),
                        ],
                        default="auto",
                        max_length=20,
                    ),
                ),
                (
                    "parser_order",
                    models.JSONField(
                        default=list,
                        help_text="Reihenfolge der zu verwendenden Parser.",
                    ),
                ),
                (
                    "text_technisch_verfuegbar_true",
                    models.JSONField(
                        default=list,
                        help_text="Reihenfolge der zu verwendenden Parser.",
                    ),
                ),
            ],
            options={
                "verbose_name": "Anlage2 Konfiguration",
            },
        ),
        migrations.CreateModel(
            name="Anlage2Function",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200, unique=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Area",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("slug", models.SlugField(unique=True)),
                (
                    "name",
                    models.CharField(
                        help_text="Einzigartiger Name des Bereichs, z.B. 'work' oder 'personal'",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "image",
                    models.ImageField(blank=True, null=True, upload_to="area_images/"),
                ),
            ],
            options={
                "ordering": ["slug"],
            },
        ),
        migrations.CreateModel(
            name="BVProject",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(blank=True, max_length=50, verbose_name="Titel"),
                ),
                (
                    "beschreibung",
                    models.TextField(blank=True, verbose_name="Beschreibung"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Erstellt am"),
                ),
                (
                    "classification_json",
                    models.JSONField(
                        blank=True, null=True, verbose_name="Klassifizierung"
                    ),
                ),
                (
                    "gutachten_file",
                    models.FileField(
                        blank=True, upload_to="gutachten", verbose_name="Gutachten"
                    ),
                ),
                (
                    "gutachten_function_note",
                    models.TextField(blank=True, verbose_name="LLM-Hinweis Gutachten"),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="LLMConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("default_model", models.CharField(blank=True, max_length=100)),
                ("gutachten_model", models.CharField(blank=True, max_length=100)),
                ("anlagen_model", models.CharField(blank=True, max_length=100)),
                ("vision_model", models.CharField(blank=True, max_length=100)),
                ("available_models", models.JSONField(blank=True, null=True)),
                ("models_changed", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "LLM Konfiguration",
            },
        ),
        migrations.CreateModel(
            name="LLMRole",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Ein kurzer, wiedererkennbarer Name für die Rolle.",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "role_prompt",
                    models.TextField(
                        help_text="Der eigentliche System-Prompt, der die Persona und Anweisungen für die KI definiert."
                    ),
                ),
                (
                    "is_default",
                    models.BooleanField(
                        default=False,
                        help_text="Soll diese Rolle als globaler Standard verwendet werden, wenn einem Prompt keine spezifische Rolle zugewiesen ist?",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ProjectStatus",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("key", models.CharField(max_length=50, unique=True)),
                ("ordering", models.PositiveIntegerField(default=0)),
                ("is_default", models.BooleanField(default=False)),
                ("is_done_status", models.BooleanField(default=False)),
            ],
            options={
                "ordering": ["ordering", "name"],
            },
        ),
        migrations.CreateModel(
            name="SoftwareType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Anlage1QuestionVariant",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("text", models.TextField()),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="variants",
                        to="core.anlage1question",
                    ),
                ),
            ],
            options={
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="Anlage2ColumnHeading",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "field_name",
                    models.CharField(
                        choices=[
                            ("technisch_vorhanden", "Technisch vorhanden"),
                            ("einsatz_bei_telefonica", "Einsatz bei Telefónica"),
                            ("zur_lv_kontrolle", "Zur LV-Kontrolle"),
                            ("ki_beteiligung", "KI-Beteiligung"),
                        ],
                        max_length=50,
                    ),
                ),
                ("text", models.CharField(max_length=200)),
                (
                    "config",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="headers",
                        to="core.anlage2config",
                    ),
                ),
            ],
            options={
                "ordering": ["field_name", "id"],
            },
        ),
        migrations.CreateModel(
            name="Anlage2SubQuestion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("frage_text", models.TextField()),
                (
                    "funktion",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.anlage2function",
                    ),
                ),
            ],
            options={
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="BVProjectFile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "anlage_nr",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "1"),
                            (2, "2"),
                            (3, "3"),
                            (4, "4"),
                            (5, "5"),
                            (6, "6"),
                        ],
                        verbose_name="Anlage Nr",
                    ),
                ),
                (
                    "upload",
                    models.FileField(upload_to="bv_files", verbose_name="Upload"),
                ),
                (
                    "text_content",
                    models.TextField(blank=True, verbose_name="Textinhalt"),
                ),
                (
                    "analysis_json",
                    models.JSONField(blank=True, null=True, verbose_name="Analyse"),
                ),
                ("manual_analysis_json", models.JSONField(blank=True, null=True)),
                (
                    "manual_comment",
                    models.TextField(blank=True, verbose_name="Kommentar"),
                ),
                ("question_review", models.JSONField(blank=True, null=True)),
                (
                    "verification_json",
                    models.JSONField(
                        blank=True,
                        help_text="Ergebnis der KI-gestützten Verifizierung der Funktionen.",
                        null=True,
                    ),
                ),
                (
                    "manual_reviewed",
                    models.BooleanField(default=False, verbose_name="Manuell geprüft"),
                ),
                (
                    "verhandlungsfaehig",
                    models.BooleanField(
                        default=False, verbose_name="Verhandlungsfähig"
                    ),
                ),
                (
                    "projekt",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="anlagen",
                        to="core.bvproject",
                    ),
                ),
            ],
            options={
                "ordering": ["anlage_nr"],
            },
        ),
        migrations.CreateModel(
            name="BVSoftware",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "projekt",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.bvproject"
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="BVProjectStatusHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("changed_at", models.DateTimeField(auto_now_add=True)),
                (
                    "projekt",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="status_history",
                        to="core.bvproject",
                    ),
                ),
                (
                    "status",
                    models.ForeignKey(
                        default=core.models.get_default_project_status,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="core.projectstatus",
                    ),
                ),
            ],
            options={
                "ordering": ["changed_at"],
            },
        ),
        migrations.AddField(
            model_name="bvproject",
            name="status",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="projects",
                to="core.projectstatus",
            ),
        ),
        migrations.CreateModel(
            name="Prompt",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50, unique=True)),
                ("text", models.TextField()),
                (
                    "use_system_role",
                    models.BooleanField(
                        default=True,
                        help_text="Wenn aktiviert, wird diesem Prompt der globale oder zugewiesene Rollen-Prompt vorangestellt. Deaktivieren für einfache Abfragen, die eine strikte, kurze Antwort erfordern.",
                    ),
                ),
                (
                    "role",
                    models.ForeignKey(
                        blank=True,
                        help_text="Optionale, spezifische Rolle für diesen Prompt. Überschreibt die globale Standard-Rolle.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core.llmrole",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Recording",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "audio_file",
                    models.FileField(upload_to=core.models.recording_upload_path),
                ),
                (
                    "transcript_file",
                    models.FileField(
                        blank=True, upload_to=core.models.transcript_upload_path
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("duration", models.FloatField(blank=True, null=True)),
                ("excerpt", models.TextField(blank=True)),
                (
                    "bereich",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.area"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="SoftwareKnowledge",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("software_name", models.CharField(max_length=100)),
                ("is_known_by_llm", models.BooleanField(default=False)),
                ("description", models.TextField(blank=True)),
                ("last_checked", models.DateTimeField(blank=True, null=True)),
                (
                    "projekt",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="softwareknowledge",
                        to="core.bvproject",
                    ),
                ),
            ],
            options={
                "ordering": ["software_name"],
                "unique_together": {("projekt", "software_name")},
            },
        ),
        migrations.CreateModel(
            name="Gutachten",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("text", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "software_knowledge",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="gutachten",
                        to="core.softwareknowledge",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Tile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("slug", models.SlugField(unique=True)),
                ("name", models.CharField(max_length=100)),
                ("url_name", models.CharField(max_length=100)),
                ("icon", models.CharField(blank=True, max_length=50)),
                ("description", models.CharField(blank=True, max_length=200)),
                (
                    "image",
                    models.ImageField(blank=True, null=True, upload_to="tile_images/"),
                ),
                (
                    "areas",
                    models.ManyToManyField(
                        help_text="Die Bereiche, in denen diese Kachel angezeigt wird.",
                        related_name="tiles",
                        to="core.area",
                    ),
                ),
            ],
            options={
                "ordering": ["slug"],
            },
        ),
        migrations.CreateModel(
            name="UserAreaAccess",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "area",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.area"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("user", "area")},
            },
        ),
        migrations.AddField(
            model_name="area",
            name="users",
            field=models.ManyToManyField(
                blank=True,
                help_text="Benutzer mit Zugriff auf diesen Bereich.",
                related_name="areas",
                through="core.UserAreaAccess",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="UserTileAccess",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "tile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.tile"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("user", "tile")},
            },
        ),
        migrations.AddField(
            model_name="tile",
            name="users",
            field=models.ManyToManyField(
                related_name="tiles",
                through="core.UserTileAccess",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="Anlage2FunctionResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("technisch_verfuegbar", models.BooleanField(null=True)),
                ("ki_beteiligung", models.BooleanField(null=True)),
                ("raw_json", models.JSONField(blank=True, null=True)),
                ("source", models.CharField(default="llm", max_length=10)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "funktion",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.anlage2function",
                    ),
                ),
                (
                    "projekt",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.bvproject"
                    ),
                ),
            ],
            options={
                "ordering": ["funktion__name"],
                "unique_together": {("projekt", "funktion")},
            },
        ),
        migrations.AddField(
            model_name="tile",
            name="parent",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="children",
                to="core.tile",
                verbose_name="Übergeordnete Kachel",
            ),
        ),
        migrations.AddField(
            model_name="tile",
            name="permission",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="auth.permission",
                verbose_name="Benötigte Berechtigung",
            ),
        ),
        migrations.RunPython(
            code=grant_superuser_all_permissions,
        ),
        migrations.CreateModel(
            name="FormatBParserRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("key", models.CharField(max_length=20, unique=True)),
                (
                    "target_field",
                    models.CharField(
                        choices=[
                            ("technisch_verfuegbar", "Technisch verfügbar"),
                            ("einsatz_telefonica", "Einsatz Telefónica"),
                            ("zur_lv_kontrolle", "Zur LV-Kontrolle"),
                            ("ki_beteiligung", "KI-Beteiligung"),
                        ],
                        max_length=50,
                    ),
                ),
                ("ordering", models.PositiveIntegerField(default=0)),
            ],
            options={
                "ordering": ["ordering", "key"],
            },
        ),
        migrations.RunPython(
            code=create_initial_formatb_rules,
        ),
        migrations.AddField(
            model_name="anlage2function",
            name="detection_phrases",
            field=models.JSONField(blank=True, default=dict),
        ),
        migrations.AddField(
            model_name="anlage2subquestion",
            name="detection_phrases",
            field=models.JSONField(blank=True, default=dict),
        ),
        migrations.CreateModel(
            name="AntwortErkennungsRegel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("regel_name", models.CharField(max_length=100)),
                ("erkennungs_phrase", models.CharField(max_length=200)),
                (
                    "ziel_feld",
                    models.CharField(
                        choices=[
                            ("technisch_verfuegbar", "Technisch verfügbar"),
                            ("einsatz_telefonica", "Einsatz Telefónica"),
                            ("zur_lv_kontrolle", "Zur LV-Kontrolle"),
                            ("ki_beteiligung", "KI-Beteiligung"),
                        ],
                        max_length=50,
                    ),
                ),
                ("wert", models.BooleanField()),
                ("prioritaet", models.IntegerField(default=0)),
            ],
            options={
                "ordering": ["prioritaet"],
            },
        ),
        migrations.CreateModel(
            name="Anlage4Config",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("table_columns", models.JSONField(blank=True, default=list)),
                ("regex_patterns", models.JSONField(blank=True, default=list)),
                ("negative_patterns", models.JSONField(blank=True, default=list)),
                ("prompt_template", models.TextField(blank=True)),
            ],
            options={
                "verbose_name": "Anlage4 Konfiguration",
            },
        ),
        migrations.AddField(
            model_name="bvprojectfile",
            name="anlage4_config",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="core.anlage4config",
            ),
        ),
        migrations.CreateModel(
            name="Anlage4ParserConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("table_columns", models.JSONField(blank=True, default=list)),
                ("prompt_plausibility", models.TextField(blank=True)),
                (
                    "delimiter_phrase",
                    models.CharField(
                        default="Name der (\\d+|\\w+)\\. Auswertung",
                        help_text="Regulärer Ausdruck, der den Beginn einer neuen Auswertung markiert.",
                        max_length=255,
                    ),
                ),
                (
                    "fachbereiche_phrase",
                    models.CharField(
                        default="Fachbereiche, in denen die Auswertung eingesetzt wird:",
                        help_text="Die exakte Phrase, die dem Wert für 'Fachbereiche' vorangeht.",
                        max_length=255,
                    ),
                ),
                (
                    "gesellschaften_phrase",
                    models.CharField(
                        default="Gesellschaften, in denen die Auswertung verwendet wird:",
                        help_text="Die exakte Phrase, die dem Wert für 'Gesellschaften' vorangeht.",
                        max_length=255,
                    ),
                ),
                ("fachbereich_aliases", models.JSONField(blank=True, default=list)),
                ("gesellschaft_aliases", models.JSONField(blank=True, default=list)),
                ("name_aliases", models.JSONField(blank=True, default=list)),
                ("negative_patterns", models.JSONField(blank=True, default=list)),
            ],
            options={
                "verbose_name": "Anlage4 Parser Konfiguration",
            },
        ),
        migrations.AddField(
            model_name="bvprojectfile",
            name="anlage4_parser_config",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="core.anlage4parserconfig",
            ),
        ),
        migrations.AddField(
            model_name="bvproject",
            name="project_prompt",
            field=models.TextField(blank=True, verbose_name="Projekt-Prompt"),
        ),
        migrations.AddField(
            model_name="anlage2functionresult",
            name="gap_summary",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="anlage2functionresult",
            name="is_negotiable",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="anlage2functionresult",
            name="doc_result",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="anlage2functionresult",
            name="ai_result",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="anlage2functionresult",
            name="manual_result",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.RunPython(
            code=copy_to_manual,
            reverse_code=noop,
        ),
        migrations.AddField(
            model_name="bvprojectfile",
            name="verification_task_id",
            field=models.CharField(
                blank=True,
                help_text="ID des laufenden Verifizierungstasks.",
                max_length=50,
            ),
        ),
        migrations.CreateModel(
            name="ZweckKategorieA",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("beschreibung", models.TextField()),
            ],
            options={
                "verbose_name": "Zweck Kategorie A",
                "verbose_name_plural": "Zwecke Kategorie A",
                "ordering": ["id"],
            },
        ),
        migrations.RunPython(
            code=seed_zweckkategoriea,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AddField(
            model_name="anlage2config",
            name="text_einsatz_telefonica_false",
            field=models.JSONField(
                default=list, help_text="Phrasen für Einsatz bei Telefónica = Nein"
            ),
        ),
        migrations.AddField(
            model_name="anlage2config",
            name="text_einsatz_telefonica_true",
            field=models.JSONField(
                default=list, help_text="Phrasen für Einsatz bei Telefónica = Ja"
            ),
        ),
        migrations.AddField(
            model_name="anlage2config",
            name="text_ki_beteiligung_false",
            field=models.JSONField(
                default=list, help_text="Phrasen für KI-Beteiligung = Nein"
            ),
        ),
        migrations.AddField(
            model_name="anlage2config",
            name="text_ki_beteiligung_true",
            field=models.JSONField(
                default=list, help_text="Phrasen für KI-Beteiligung = Ja"
            ),
        ),
        migrations.AddField(
            model_name="anlage2config",
            name="text_technisch_verfuegbar_false",
            field=models.JSONField(
                default=list, help_text="Phrasen für technisch verfügbar = Nein"
            ),
        ),
        migrations.AddField(
            model_name="anlage2config",
            name="text_zur_lv_kontrolle_false",
            field=models.JSONField(
                default=list, help_text="Phrasen für zur LV-Kontrolle = Nein"
            ),
        ),
        migrations.AddField(
            model_name="anlage2config",
            name="text_zur_lv_kontrolle_true",
            field=models.JSONField(
                default=list, help_text="Phrasen für zur LV-Kontrolle = Ja"
            ),
        ),
        migrations.AlterField(
            model_name="anlage2config",
            name="text_technisch_verfuegbar_true",
            field=models.JSONField(
                default=list, help_text="Phrasen für technisch verfügbar = Ja"
            ),
        ),
        migrations.AddField(
            model_name="anlage2functionresult",
            name="einsatz_bei_telefonica",
            field=models.BooleanField(null=True),
        ),
        migrations.AddField(
            model_name="anlage2functionresult",
            name="zur_lv_kontrolle",
            field=models.BooleanField(null=True),
        ),
        migrations.AddField(
            model_name="anlage2functionresult",
            name="gap_notiz",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="antworterkennungsregel",
            name="regel_anwendungsbereich",
            field=models.CharField(
                choices=[
                    ("Hauptfunktion", "Hauptfunktion"),
                    ("Unterfrage", "Unterfrage"),
                ],
                default="Hauptfunktion",
                max_length=20,
            ),
        ),
        migrations.AddField(
            model_name="anlage2functionresult",
            name="is_negotiable_manual_override",
            field=models.BooleanField(blank=True, null=True),
        ),
        migrations.CreateModel(
            name="Anlage5Review",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("sonstige_zwecke", models.TextField(blank=True)),
                (
                    "found_purposes",
                    models.ManyToManyField(blank=True, to="core.zweckkategoriea"),
                ),
                (
                    "project_file",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="anlage5review",
                        to="core.bvprojectfile",
                    ),
                ),
            ],
            options={
                "verbose_name": "Anlage 5 Review",
                "verbose_name_plural": "Anlage 5 Reviews",
            },
        ),
        migrations.RunPython(
            code=add_prompts,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AddField(
            model_name="bvprojectfile",
            name="anlage6_note",
            field=models.TextField(blank=True, verbose_name="Prüfnotiz"),
        ),
        migrations.AddField(
            model_name="anlage2functionresult",
            name="subquestion",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="core.anlage2subquestion",
            ),
        ),
        migrations.CreateModel(
            name="Anlage3Metadata",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=200)),
                ("beschreibung", models.TextField(blank=True)),
                ("zeitraum", models.CharField(blank=True, max_length=100)),
                ("art", models.CharField(blank=True, max_length=100)),
                (
                    "project_file",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="anlage3meta",
                        to="core.bvprojectfile",
                    ),
                ),
            ],
            options={
                "verbose_name": "Anlage 3 Metadaten",
                "verbose_name_plural": "Anlage 3 Metadaten",
            },
        ),
        migrations.CreateModel(
            name="Anlage3ParserRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "field_name",
                    models.CharField(
                        choices=[
                            ("name", "Name der Auswertung"),
                            ("beschreibung", "Beschreibung"),
                            ("zeitraum", "Zeitraum"),
                            ("art", "Art der Auswertung"),
                        ],
                        max_length=50,
                    ),
                ),
                ("aliases", models.JSONField(blank=True, default=list)),
                ("ordering", models.PositiveIntegerField(default=0)),
            ],
            options={
                "verbose_name": "Anlage 3 Parser Regel",
                "verbose_name_plural": "Anlage 3 Parser Regeln",
                "ordering": ["ordering", "id"],
            },
        ),
        migrations.RunPython(
            code=seed_anlage3_parser_rules,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AddField(
            model_name="antworterkennungsregel",
            name="actions_json",
            field=models.JSONField(
                blank=True,
                default=dict,
                help_text="Feld-Wert-Paare für den exakten Parser.",
            ),
        ),
        migrations.AddField(
            model_name="bvprojectfile",
            name="parser_mode",
            field=models.CharField(
                blank=True,
                choices=[
                    ("auto", "Automatisch"),
                    ("table_only", "Nur Tabellen"),
                    ("text_only", "Nur Text"),
                    ("exact_only", "Nur Exakt"),
                ],
                default="",
                help_text="Spezifischer Parser-Modus für diese Anlage.",
                max_length=20,
            ),
        ),
        migrations.AddField(
            model_name="bvprojectfile",
            name="parser_order",
            field=models.JSONField(
                blank=True,
                default=list,
                help_text="Reihenfolge der Parser für diese Anlage.",
            ),
        ),
        migrations.AlterField(
            model_name="anlage2config",
            name="parser_mode",
            field=models.CharField(
                choices=[
                    ("auto", "Automatisch"),
                    ("table_only", "Nur Tabellen"),
                    ("text_only", "Nur Text"),
                    ("exact_only", "Nur Exakt"),
                ],
                default="auto",
                max_length=20,
            ),
        ),
        migrations.RunPython(
            code=migrate_actions_json_forwards,
            reverse_code=migrate_actions_json_noop,
        ),
        migrations.RemoveField(
            model_name="antworterkennungsregel",
            name="ziel_feld",
        ),
        migrations.RemoveField(
            model_name="antworterkennungsregel",
            name="wert",
        ),
        migrations.RunPython(
            code=add_prompt,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AlterField(
            model_name="antworterkennungsregel",
            name="actions_json",
            field=models.JSONField(
                blank=True, default=list, help_text="Aktionen als Liste von Objekten."
            ),
        ),
        migrations.RunPython(
            code=actions_json_list_forwards,
            reverse_code=actions_json_list_backwards,
        ),
        migrations.RemoveField(
            model_name="anlage2functionresult",
            name="ai_result",
        ),
        migrations.RemoveField(
            model_name="anlage2functionresult",
            name="doc_result",
        ),
        migrations.RemoveField(
            model_name="anlage2functionresult",
            name="manual_result",
        ),
        migrations.RemoveField(
            model_name="anlage2functionresult",
            name="raw_json",
        ),
        migrations.CreateModel(
            name="FunktionsErgebnis",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("quelle", models.CharField(max_length=20)),
                ("technisch_verfuegbar", models.BooleanField(null=True)),
                ("einsatz_bei_telefonica", models.BooleanField(null=True)),
                ("zur_lv_kontrolle", models.BooleanField(null=True)),
                ("ki_beteiligung", models.BooleanField(null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "funktion",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.anlage2function",
                    ),
                ),
                (
                    "projekt",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.bvproject"
                    ),
                ),
                (
                    "subquestion",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.anlage2subquestion",
                    ),
                ),
                (
                    "anlage_datei",
                    models.ForeignKey(
                        default=1,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="funktions_ergebnisse",
                        to="core.bvprojectfile",
                    ),
                ),
                ("begruendung", models.TextField(blank=True, null=True)),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.RunPython(
            code=set_anlage_datei_for_existing_results,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RenameModel(
            old_name="Anlage2FunctionResult",
            new_name="AnlagenFunktionsMetadaten",
        ),
        migrations.RenameField(
            model_name="anlagenfunktionsmetadaten",
            old_name="projekt",
            new_name="anlage_datei",
        ),
        migrations.AlterField(
            model_name="anlagenfunktionsmetadaten",
            name="anlage_datei",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="core.bvprojectfile"
            ),
        ),
        migrations.RemoveField(
            model_name="anlagenfunktionsmetadaten",
            name="technisch_verfuegbar",
        ),
        migrations.RemoveField(
            model_name="anlagenfunktionsmetadaten",
            name="ki_beteiligung",
        ),
        migrations.RemoveField(
            model_name="anlagenfunktionsmetadaten",
            name="einsatz_bei_telefonica",
        ),
        migrations.RemoveField(
            model_name="anlagenfunktionsmetadaten",
            name="zur_lv_kontrolle",
        ),
        migrations.RemoveField(
            model_name="anlagenfunktionsmetadaten",
            name="source",
        ),
        migrations.RemoveField(
            model_name="anlagenfunktionsmetadaten",
            name="created_at",
        ),
        migrations.AlterField(
            model_name="anlage2config",
            name="parser_order",
            field=models.JSONField(
                default=core.models.Anlage2Config.default_parser_order,
                help_text="Reihenfolge der zu verwendenden Parser.",
            ),
        ),
        migrations.AddField(
            model_name="funktionsergebnis",
            name="gap_begruendung_intern",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="funktionsergebnis",
            name="gap_begruendung_extern",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.RunPython(
            code=add_gap_prompts,
            reverse_code=remove_gap_prompts,
        ),
        migrations.AddField(
            model_name="anlagenfunktionsmetadaten",
            name="supervisor_notes",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.CreateModel(
            name="SupervisionStandardNote",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("note_text", models.CharField(max_length=100, unique=True)),
                ("is_active", models.BooleanField(default=True)),
                ("display_order", models.PositiveIntegerField(default=0)),
            ],
            options={
                "ordering": ["display_order", "note_text"],
                "verbose_name": "Standardnotiz Supervision",
                "verbose_name_plural": "Standardnotizen Supervision",
            },
        ),
        migrations.RunPython(
            code=add_default_notes,
            reverse_code=remove_default_notes,
        ),
        migrations.AddField(
            model_name="bvprojectfile",
            name="is_active",
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name="bvprojectfile",
            name="parent",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="children",
                to="core.bvprojectfile",
            ),
        ),
        migrations.AddField(
            model_name="bvprojectfile",
            name="version",
            field=models.PositiveIntegerField(default=1),
        ),
        migrations.AddField(
            model_name="bvprojectfile",
            name="processing_status",
            field=models.CharField(
                choices=[
                    ("PENDING", "Ausstehend"),
                    ("PROCESSING", "In Bearbeitung"),
                    ("COMPLETE", "Abgeschlossen"),
                    ("FAILED", "Fehlgeschlagen"),
                ],
                default="PENDING",
                max_length=20,
            ),
        ),
        migrations.AddField(
            model_name="prompt",
            name="use_project_context",
            field=models.BooleanField(
                default=True,
                help_text="Soll diesem Prompt automatisch der Projekt-Kontext vorangestellt werden?",
            ),
        ),
        migrations.AddField(
            model_name="bvprojectfile",
            name="created_at",
            field=models.DateTimeField(
                auto_now_add=True, default=django.utils.timezone.now
            ),
            preserve_default=False,
        ),
        migrations.RunPython(
            code=forwards_func,
            reverse_code=reverse_func,
        ),
        migrations.AddField(
            model_name="funktionsergebnis",
            name="ki_beteiligt_begruendung",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="bvprojectfile",
            name="gap_notiz",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="bvprojectfile",
            name="gap_summary",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.RemoveField(
            model_name="funktionsergebnis",
            name="gap_begruendung_extern",
        ),
        migrations.RemoveField(
            model_name="funktionsergebnis",
            name="gap_begruendung_intern",
        ),
        migrations.AlterField(
            model_name="anlage2config",
            name="parser_order",
            field=models.JSONField(
                default=list, help_text="Reihenfolge der zu verwendenden Parser."
            ),
        ),
        migrations.AlterField(
            model_name="bvproject",
            name="classification_json",
            field=models.JSONField(
                blank=True, default=dict, null=True, verbose_name="Klassifizierung"
            ),
        ),
        migrations.AlterField(
            model_name="bvprojectfile",
            name="analysis_json",
            field=models.JSONField(
                blank=True, default=dict, null=True, verbose_name="Analyse"
            ),
        ),
        migrations.AlterField(
            model_name="bvprojectfile",
            name="manual_analysis_json",
            field=models.JSONField(blank=True, default=dict, null=True),
        ),
        migrations.AlterField(
            model_name="bvprojectfile",
            name="question_review",
            field=models.JSONField(blank=True, default=dict, null=True),
        ),
        migrations.AlterField(
            model_name="bvprojectfile",
            name="verification_json",
            field=models.JSONField(
                blank=True,
                default=dict,
                help_text="Ergebnis der KI-gestützten Verifizierung der Funktionen.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="llmconfig",
            name="available_models",
            field=models.JSONField(blank=True, default=list, null=True),
        ),
    ]
