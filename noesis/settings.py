"""
Django settings for noesis project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import sys
import secrets
from typing import Any, Dict
import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Umgebungsvariablen initialisieren
env = environ.Env(DEBUG=(bool, False))
env.read_env(BASE_DIR / ".env")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Fallback-Wert erlaubt den Build ohne gesetzte Umgebungsvariable.
SECRET_KEY = env("DJANGO_SECRET_KEY", default="unsicherer-build-schluessel")

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = env.bool("DEBUG", default=False)
DEBUG = True


# Standard-Hosts für lokale Entwicklung
ALLOWED_HOSTS = ["localhost", "127.0.0.1"]

# In Cloud Run wird K_SERVICE gesetzt; dann zusätzliche Hostfreigabe
if os.environ.get("K_SERVICE"):
    ALLOWED_HOSTS.append(".run.app")
    # Proxy-Header vertrauen, um korrekte Host- und Schema-Informationen zu erhalten
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
    USE_X_FORWARDED_HOST = True

# Vertrauenswürdige Ursprünge für CSRF-Schutz (Cloud Run)
CSRF_TRUSTED_ORIGINS = ["https://*.run.app"]

INTERNAL_IPS = ["127.0.0.1", "0.0.0.0"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "core",
    "django_q",
    "tailwind",
    "django_browser_reload",
    "theme",
]

TAILWIND_APP_NAME = "theme"
# Betriebssystemabhängiger Pfad zu npm
if sys.platform.startswith("win"):
    NPM_BIN_PATH = r"C:\Program Files\nodejs\npm.cmd"
else:
    NPM_BIN_PATH = "/usr/bin/npm"

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "core.middleware.LLMConfigNoticeMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_browser_reload.middleware.BrowserReloadMiddleware",
]

ROOT_URLCONF = "noesis.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "core.context_processors.is_admin",
                "core.context_processors.user_navigation",
            ],
            "libraries": {
                "ui_extras": "core.templatetags.ui_extras",
            },
        },
    },
]

WSGI_APPLICATION = "noesis.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases


def _postgres_config() -> Dict[str, Any]:
    """Liefert die Einstellungen für PostgreSQL."""

    host_env = os.environ.get("DB_HOST", "localhost")

    # Wenn Cloud Run Service oder Job → Unix-Socket nutzen
    if os.environ.get("K_SERVICE") or host_env.startswith("/cloudsql/"):
        # Präfix /cloudsql/ nur einmal voranstellen
        if host_env.startswith("/cloudsql/"):
            host = host_env
        else:
            host = f"/cloudsql/{host_env}"
        port = None
    else:
        # Lokale Entwicklung nutzt Host/Port
        host = host_env
        port = os.environ.get("DB_PORT", "5432")

    config: Dict[str, Any] = {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("DB_NAME", "noesis_db"),
        "USER": os.environ.get("DB_USER", secrets.token_hex(8)),
        "PASSWORD": os.environ.get("DB_PASSWORD", secrets.token_hex(16)),
        "HOST": host,
        "OPTIONS": {
            "client_encoding": "UTF8",
            "options": "-c search_path=public",
        },
    }

    if port:
        config["PORT"] = port

    return config


if os.environ.get("DB_HOST"):
    # Verwendung der konfigurierten PostgreSQL-Datenbank
    DATABASES = {"default": _postgres_config()}
else:
    # Minimale Dummy-Datenbank für Build-Prozesse
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": ":memory:",
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "de-de"

TIME_ZONE = "Europe/Berlin"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [BASE_DIR / "static"]

# Hinzufügen für die Produktion:
STATIC_ROOT = BASE_DIR / "staticfiles"

STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"
MAX_UPLOAD_SIZE = 10 * 1024 * 1024  # 10 MB

# Cookies explizit auf SameSite=Lax setzen
SESSION_COOKIE_SAMESITE = "Lax"
CSRF_COOKIE_SAMESITE = "Lax"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Authentication settings
LOGIN_URL = "/login/"
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/login/"

# API-Schlüssel für LLM-Abfragen
GOOGLE_API_KEY = os.environ.get("GOOGLE_API_KEY", "")
GOOGLE_AVAILABLE_MODELS = [
    "gemini-pro",
    "gemini-1.5-flash-latest",
    "gemini-1.5-pro-latest",
    "gemini-2.5-flash-preview-05-20",
]
GOOGLE_LLM_MODEL = GOOGLE_AVAILABLE_MODELS[0]
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY", "")
OPENAI_LLM_MODEL = "gpt-4o"
GOOGLE_VISION_MODEL = "gemini-pro-vision"
OPENAI_VISION_MODEL = OPENAI_LLM_MODEL


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
        "llm_formatter": {
            "format": "{asctime} [{levelname}] {message}",
            "style": "{",
        },
    },
    "filters": {
        "anlage1": {"()": "noesis.logging_filters.AnlageFilter", "anlage": "1"},
        "anlage2": {"()": "noesis.logging_filters.AnlageFilter", "anlage": "2"},
        "anlage3": {"()": "noesis.logging_filters.AnlageFilter", "anlage": "3"},
        "anlage4": {"()": "noesis.logging_filters.AnlageFilter", "anlage": "4"},
        "anlage5": {"()": "noesis.logging_filters.AnlageFilter", "anlage": "5"},
    },
    "handlers": {
        "console": {
            "level": "INFO",  # Zeigt nur Informationen und Fehler in der Konsole an
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        "file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "debug.log",
            "formatter": "verbose",
            "encoding": "utf-8",
        },
        "llm_file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "llm-debug.log",
            "formatter": "llm_formatter",
            "encoding": "utf-8",
        },
        "anlage1_detail_file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "anlage1-detail.log",
            "formatter": "verbose",
            "encoding": "utf-8",
        },
        "anlage1_result_file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "anlage-1.log",
            "formatter": "verbose",
            "encoding": "utf-8",
        },
        "postgres_anlage1_file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "postgres-anlage1.log",
            "formatter": "verbose",
            "encoding": "utf-8",
            "filters": ["anlage1"],
        },
        "anlage2_detail_file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "anlage2-detail.log",
            "formatter": "verbose",
            "encoding": "utf-8",
        },
        "anlage2_result_file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "anlage-2.log",
            "formatter": "verbose",
            "encoding": "utf-8",
        },
        "postgres_anlage2_file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "postgres-anlage2.log",
            "formatter": "verbose",
            "encoding": "utf-8",
            "filters": ["anlage2"],
        },
        "anlage3_detail_file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "anlage3-detail.log",
            "formatter": "verbose",
            "encoding": "utf-8",
        },
        "anlage3_result_file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "anlage-3.log",
            "formatter": "verbose",
            "encoding": "utf-8",
        },
        "postgres_anlage3_file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "postgres-anlage3.log",
            "formatter": "verbose",
            "encoding": "utf-8",
            "filters": ["anlage3"],
        },
        "anlage4_detail_file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "anlage4-detail.log",
            "formatter": "verbose",
            "encoding": "utf-8",
        },
        "anlage4_result_file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "anlage-4.log",
            "formatter": "verbose",
            "encoding": "utf-8",
        },
        "postgres_anlage4_file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "postgres-anlage4.log",
            "formatter": "verbose",
            "encoding": "utf-8",
            "filters": ["anlage4"],
        },
        "anlage5_detail_file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "anlage5-detail.log",
            "formatter": "verbose",
            "encoding": "utf-8",
        },
        "anlage5_result_file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "anlage-5.log",
            "formatter": "verbose",
            "encoding": "utf-8",
        },
        "postgres_anlage5_file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "postgres-anlage5.log",
            "formatter": "verbose",
            "encoding": "utf-8",
            "filters": ["anlage5"],
        },
        "workflow_file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "debug_workflow.log",
            "formatter": "verbose",
            "encoding": "utf-8",
        },
        "ki_involvement_file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "llm-kibeteiligung.log",
            "formatter": "verbose",
            "encoding": "utf-8",
        },
    },
    "loggers": {
        "": {  # Dies ist der Root-Logger. Er fängt alle Meldungen ab, die nicht von spezifischeren Loggern behandelt werden.
            "handlers": ["console", "file"],
            "level": "DEBUG",  # Wichtig: Der Root-Logger muss DEBUG-Meldungen abfangen
            "propagate": False,
        },
        "django": {  # Der Django-spezifische Logger
            "handlers": ["console", "file"],
            "level": "INFO",  # Django selbst loggt nicht alles auf DEBUG standardmäßig, INFO ist oft ausreichend
            "propagate": False,
        },
        "llm_debugger": {
            "handlers": ["llm_file"],
            "level": "DEBUG",
            "propagate": False,
        },
        "deine_app_name": {  # Füge einen Logger für deine spezifische App hinzu (ersetze 'deine_app_name')
            "handlers": ["console", "file"],
            "level": "DEBUG",  # Hier setzt du den Loglevel für DEINE App auf DEBUG
            "propagate": False,
        },
        "anlage1_detail": {
            "handlers": ["anlage1_detail_file"],
            "level": "DEBUG",
            "propagate": False,
        },
        "anlage1_result": {
            "handlers": ["anlage1_result_file"],
            "level": "DEBUG",
            "propagate": False,
        },
        "anlage2_detail": {
            "handlers": ["anlage2_detail_file"],
            "level": "DEBUG",
            "propagate": False,
        },
        "anlage2_result": {
            "handlers": ["anlage2_result_file"],
            "level": "DEBUG",
            "propagate": False,
        },
        "anlage3_detail": {
            "handlers": ["anlage3_detail_file"],
            "level": "DEBUG",
            "propagate": False,
        },
        "anlage3_result": {
            "handlers": ["anlage3_result_file"],
            "level": "DEBUG",
            "propagate": False,
        },
        "anlage4_detail": {
            "handlers": ["anlage4_detail_file"],
            "level": "DEBUG",
            "propagate": False,
        },
        "anlage4_result": {
            "handlers": ["anlage4_result_file"],
            "level": "DEBUG",
            "propagate": False,
        },
        "anlage5_detail": {
            "handlers": ["anlage5_detail_file"],
            "level": "DEBUG",
            "propagate": False,
        },
        "anlage5_result": {
            "handlers": ["anlage5_result_file"],
            "level": "DEBUG",
            "propagate": False,
        },
        "postgres": {
            "handlers": [
                "postgres_anlage1_file",
                "postgres_anlage2_file",
                "postgres_anlage3_file",
                "postgres_anlage4_file",
                "postgres_anlage5_file",
            ],
            "level": "DEBUG",
            "propagate": False,
        },
        "workflow_debug": {
            "handlers": ["workflow_file"],
            "level": "DEBUG",
            "propagate": False,
        },
        "ki_involvement": {
            "handlers": ["ki_involvement_file"],
            "level": "DEBUG",
            "propagate": False,
        },
        "core.llm_tasks": {
            "handlers": ["console", "file"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
}

if os.environ.get("K_SERVICE"):
    console_handler = LOGGING["handlers"]["console"]
    LOGGING["handlers"] = {"console": console_handler}
    for logger in LOGGING["loggers"].values():
        logger["handlers"] = ["console"]

# if sys.version_info >= (3, 12):
#    LOGGING["handlers"]["console"]["encoding"] = "utf-8"

# Django-Q Konfiguration

# Standardwerte für Entwicklung und Produktion festlegen
Q_CLUSTER_WORKERS_DEFAULT = os.cpu_count() or 1
Q_CLUSTER_TIMEOUT_DEFAULT = 1200
Q_CLUSTER_RETRY_DEFAULT = 1300

if not DEBUG:
    # Kürzere Intervalle und mehr Worker in der Produktion
    Q_CLUSTER_WORKERS_DEFAULT = 4
    Q_CLUSTER_TIMEOUT_DEFAULT = 60
    Q_CLUSTER_RETRY_DEFAULT = 70

Q_CLUSTER = {
    "name": "noesis_q",
    "workers": int(
        os.environ.get("Q_CLUSTER_WORKERS", Q_CLUSTER_WORKERS_DEFAULT)
    ),
    "recycle": 500,
    "timeout": int(
        os.environ.get("Q_CLUSTER_TIMEOUT", Q_CLUSTER_TIMEOUT_DEFAULT)
    ),
    "retry": int(os.environ.get("Q_CLUSTER_RETRY", Q_CLUSTER_RETRY_DEFAULT)),
    "compress": True,
    "save_limit": 250,
    "queue_limit": 500,
    "label": "Django Q",
    "orm": "default",
}
