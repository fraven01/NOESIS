from pathlib import Path
from tempfile import NamedTemporaryFile
import tempfile
import os
import re
import uuid
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib.auth.models import User, Group, Permission
from django.http import (
    HttpRequest,
    HttpResponseBadRequest,
    Http404,
    HttpResponse,
    HttpResponseForbidden,
)
from django.core.exceptions import PermissionDenied
from django.core.files.storage import default_storage
from django.core.files.base import ContentFile
from django.core.files.uploadedfile import SimpleUploadedFile
from django.contrib import messages
from django.http import JsonResponse, FileResponse
from django.views.decorators.http import require_http_methods, require_POST
from django.core.paginator import Paginator
from django.urls import reverse, reverse_lazy
from typing import Any
from django.views.generic import ListView, CreateView, UpdateView, DeleteView
from django.contrib.auth.mixins import LoginRequiredMixin, UserPassesTestMixin
from django.contrib.admin.views.decorators import staff_member_required
from django.core.management import call_command
import io
import zipfile
from django.db import connection, transaction
from django.db.models import Q
import subprocess
import whisper
import torch
import json
import asyncio
from django_q.tasks import async_task, fetch, result, Task

from .forms import (
    RecordingForm,
    BVProjectForm,
    BVProjectUploadForm,
    BVProjectFileForm,
    BVProjectFileJSONForm,
    BVGapNotesForm,
    Anlage1ReviewForm,
    Anlage2ReviewForm,
    Anlage4ReviewForm,
    Anlage3MetadataForm,
    Anlage5ReviewForm,
    Anlage6ReviewForm,
    get_anlage2_fields,
    Anlage2FunctionForm,
    Anlage2FunctionImportForm,
    PromptImportForm,
    Anlage1ImportForm,
    Anlage2SubQuestionForm,
    get_anlage1_numbers,
    Anlage2ConfigForm,
    get_parser_choices,
    EditJustificationForm,
    JustificationForm,
    KnowledgeDescriptionForm,
    ProjectContextForm,
    ProjectStatusForm,
    ProjectStatusImportForm,
    LLMRoleForm,
    LLMRoleImportForm,
    UserPermissionsForm,
    UserImportForm,
    Anlage2ConfigImportForm,
    ProjectImportForm,
    Anlage2ParserRuleImportForm,
    ZweckKategorieAForm,
    SupervisionStandardNoteForm,
    AntwortErkennungsRegelForm,
    Anlage4ParserConfigForm,
    ParserSettingsForm,
    ActionForm,
    Anlage3ParserRuleForm,
)
from .text_parser import PHRASE_TYPE_CHOICES
from .models import (
    Recording,
    BVProject,
    BVProjectFile,
    transcript_upload_path,
    Prompt,
    LLMConfig,
    Anlage1Question,
    Anlage1QuestionVariant,
    Anlage2Function,
    Anlage2SubQuestion,
    Anlage2Config,
    Anlage2ColumnHeading,
    AnlagenFunktionsMetadaten,
    FunktionsErgebnis,
    SoftwareKnowledge,
    Gutachten,
    Tile,
    Area,
    ProjectStatus,
    LLMRole,
    AntwortErkennungsRegel,
    Anlage4Config,
    Anlage4ParserConfig,
    ZweckKategorieA,
    Anlage5Review,
    Anlage3ParserRule,
    Anlage3Metadata,
    SupervisionStandardNote,
)
from .docx_utils import extract_text, get_docx_page_count
from .llm_utils import query_llm
from .prompt_context import build_prompt_context
from .workflow import set_project_status
from .reporting import generate_gap_analysis, generate_management_summary
from .llm_tasks import (
    check_anlage1,
    analyse_anlage3,
    check_anlage2,
    analyse_anlage4,
    analyse_anlage4_async,
    check_anlage5,
    run_conditional_anlage2_check,
    run_anlage2_analysis,
    check_gutachten_functions,
    generate_gutachten,
    get_prompt,
    ANLAGE1_QUESTIONS,
    _calc_auto_negotiable,
    _extract_bool,
    summarize_anlage1_gaps,
    summarize_anlage2_gaps,
)
from .parser_manager import parser_manager

from .decorators import admin_required, tile_required
from .obs_utils import start_recording, stop_recording, is_recording
from .utils import get_project_file, start_analysis_for_file, has_any_gap
from django.forms import formset_factory, modelformset_factory


class StaffRequiredMixin(UserPassesTestMixin):
    """Mixin erlaubt Zugriff nur fÃ¼r Mitarbeiter."""

    def test_func(self) -> bool:
        return self.request.user.is_staff


import logging
import sys
import copy

import time

import markdown
import pypandoc
from django.conf import settings
from .templatetags.recording_extras import markdownify

logger = logging.getLogger(__name__)
detail_logger = logging.getLogger("anlage2_detail")
admin_a2_logger = logging.getLogger("anlage2_detail")
anlage2_logger = logging.getLogger("anlage2_detail")
ergebnis_logger = logging.getLogger("anlage2_result")
anlage4_logger = logging.getLogger("anlage4_detail")
workflow_logger = logging.getLogger("workflow_debug")


ADMIN_ROOT = ("admin_projects", "Admin")


def build_breadcrumbs(*crumbs: tuple[str, str] | str) -> list[dict[str, str]]:
    """Erzeugt eine Breadcrumb-Liste."""

    items: list[dict[str, str]] = []
    for c in crumbs:
        if isinstance(c, tuple):
            url_name, label = c
            items.append({"url": reverse(url_name), "label": label})
        else:
            items.append({"label": c})
    return items


_WHISPER_MODEL = None


def _get_whisper_model():
    """Lade das Whisper-Modell nur einmal."""
    global _WHISPER_MODEL
    logger.debug("Whisper-Modell wird angefordert")
    if _WHISPER_MODEL is None:
        device = "cuda" if torch.cuda.is_available() else "cpu"
        logger.debug("Lade Whisper-Modell auf %s", device)
        _WHISPER_MODEL = whisper.load_model("base", device=device)
