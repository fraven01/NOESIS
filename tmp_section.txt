def test_build_prompt_context_keys(db) -> None:    """PrÃ¼ft, dass ``build_prompt_context`` alle Platzhalter fÃ¼llt."""    projekt = create_project(title="Demo", software=["Soft"])    ctx = build_prompt_context(projekt)    for key in available_placeholders():        assert key in ctx    assert ctx["project_name"] == "Demo"    assert ctx["software_name"] == "Soft"    Prompt.objects.update_or_create(        name="check_anlage3_vision",        defaults={            "text": "PrÃ¼fe die folgenden Bilder der Anlage. Gib ein JSON mit 'ok' und 'hinweis' zurÃ¼ck:\n\n"        },    )    # Weitere Prompts fÃ¼r Tests bereitstellen    roles = {r.name: r for r in apps.get_model("core", "LLMRole").objects.all()}    prompt_data = {        "anlage1_email": {            "text": (                "Formuliere eine freundliche E-Mail an den Fachbereich. "                "Wir haben die Anlage 1 geprÃ¼ft und noch folgende VorschlÃ¤ge, "                "bevor der Mitbestimmungsprozess weiter gehen kann. "                "Bitte fasse die folgenden VorschlÃ¤ge zusammen:\r\n\r\n"            )        },        "anlage2_ai_involvement_check": {            "text": (                "Antworte ausschlieÃŸlich mit 'Ja' oder 'Nein'. Frage: "                "Beinhaltet die Funktion '{function_name}' der Software "                "'{software_name}' typischerweise eine KI-Komponente? "                "Eine KI-Komponente liegt vor, wenn die Funktion "                "unstrukturierte Daten (Text, Bild, Ton) verarbeitet, "                "Sentiment-Analysen durchfÃ¼hrt oder nicht-deterministische, "                "probabilistische Ergebnisse liefert."            )        },        "anlage2_feature_justification": {            "text": (                "Warum besitzt die Software '{software_name}' typischerweise die "                "Funktion oder Eigenschaft '{function_name}'?   Ist es mÃ¶glich "                "mit der {function_name} eine Leistungskontrolle oder eine "                "Verhaltenskontrolle  Ist damit eine Leistungskontrolle oder "                "eine Verhaltenskontrolle im Sinne des Â§87 Abs. 1 Nr. 6 mÃ¶glich? "                "Wenn ja, wie?"            )        },        "anlage2_subquestion_possibility_check": {            "text": (                "Im Kontext der Funktion '{function_name}' der Software "                "'{software_name}': Ist die spezifische Anforderung "                "'{subquestion_text}' technisch mÃ¶glich? Antworte nur mit 'Ja', "                "'Nein' oder 'Unsicher'."            )        },        "anlage2_subquestion_justification_check": {            "text": (                " [SYSTEM]\nDu bist Fachautor*in fÃ¼r IT-Mitbestimmung (Â§87 Abs. 1 Nr. 6 BetrVG).\n"                "Antworte Unterfrage prÃ¤gnant in **maximal zwei SÃ¤tzen** (insgesamt â‰¤ 65 WÃ¶rter) und erfÃ¼lle folgende Regeln :\n\n"                "1. Starte Teil A mit â€žTypischer Zweck: â€¦â€œ  \n2. Starte Teil B mit â€žKontrolle: Ja, â€¦â€œ oder â€žKontrolle: Nein, â€¦â€œ.  \n"                "3. Nenne exakt die Ã¼bergebene Funktion/Eigenschaft, erfinde nichts dazu.  \n"                "4. ErklÃ¤re knapp *warum* mit der Funktion die Unterfrage (oder warum nicht) eine Leistungs- oder Verhaltenskontrolle mÃ¶glich ist.  \n"                "5. Verwende Alltagssprache, keine Marketing-Floskeln.\n\n"                ' [USER]\nSoftware: {{software_name}}  \nFunktion/Eigenschaft: {{function_name}}  \nUnterfrage: "{{subquestion_text}}"'            )        },        "anlage2_ai_verification_prompt": {            "text": (                "Gib eine kurze BegrÃ¼ndung, warum die Funktion '{function_name}' "                "(oder die Unterfrage '{subquestion_text}') der Software "                "'{software_name}' eine KI-Komponente beinhaltet oder beinhalten kann, "                "insbesondere im Hinblick auf die Verarbeitung unstrukturierter Daten "                "oder nicht-deterministischer Ergebnisse."            )        },        "anlage2_feature_verification": {            "text": (                "Deine einzige Aufgabe ist es, die folgende Frage mit einem einzigen "                'Wort zu beantworten. Deine Antwort darf AUSSCHLIESSLICH "Ja", '                '"Nein", oder "Unsicher" sein. Gib keine Einleitung, keine '                "BegrÃ¼ndung und keine weiteren ErklÃ¤rungen ab.\r\n\r\nFrage: "                "Besitzt die Software '{software_name}' basierend auf allgemeinem "                "Wissen typischerweise die Funktion oder Eigenschaft "                "'{function_name}'?\n\n{gutachten}"            ),            "role": roles.get("Standard"),            "use_system_role": False,        },        "check_anlage4": {            "text": "PrÃ¼fe die folgende Anlage auf VollstÃ¤ndigkeit. Gib ein JSON mit 'ok' und 'hinweis' zurÃ¼ck:\n\n",        },        "check_anlage5": {            "text": "PrÃ¼fe die folgende Anlage auf VollstÃ¤ndigkeit. Gib ein JSON mit 'ok' und 'hinweis' zurÃ¼ck:\n\n"        },        "classify_system": {            "text": (                "Bitte klassifiziere das folgende Softwaresystem. "                "Gib ein JSON mit den SchlÃ¼sseln 'kategorie' und 'begruendung' zurÃ¼ck.\n\n"            )        },        "generate_gutachten": {            "text": (                "Erstelle ein tiefgehendes Gutachten zu der Software im Sinne des Â§ 87 Abs. 1 Nr. 6 BetrVG. "                "Richte das Gutachten ausschlieÃŸlich an BetriebsrÃ¤te und Ã¼berspringe allgemeine ErlÃ¤uterungen "                "zu DSGVO oder Datenschutzrecht ebenso musst du nicht erlÃ¤utern, wann Mitbestimmungsrechte "                "nach Â§87 (1) Nr. 6 gelten.\n\nDein Gutachten soll folgende Punkte abdecken: \n\n1. **Mitbestimmungspflichtige Funktionen**   \n- Liste alleFeatures auf, die der Leistungs- oder Verhaltenskontrolle dienen (z. B. Analyse von Nutzungshistorien, App- und Kommunikationsauswertung, Dateizugriffsprotokolle).\n- ErlÃ¤utere kurz, warum jede einzelne Funktion unter Â§ 87 1 Nr. 6 BetrVG fÃ¤llt. \n\n2. **EingriffsintensitÃ¤t aus Mitarbeitersicht**   \n   - Beschreibe, wie stark jede dieser Funktionen in den Arbeitsablauf eingreift und welche Verhaltensaspekte sie Ã¼berwacht (z. B. HÃ¤ufigkeit von App-Nutzung, Kommunikationsverhalten, Standortdaten).   \n   - Nutze eine Skala (gering â€“ mittel â€“ hoch) und begrÃ¼nde die Einstufung anhand typischer BetriebsablÃ¤ufe in einem Telekommunikationsunternehmen. \n\n3. **Betroffene Leistungs- und Verhaltensaspekte**   \n   - Identifiziere konkret, welche Leistungskennzahlen (z. B. AktivitÃ¤tszeiten, App-Nutzungsdauer) und Verhaltensmuster (z. B. KommunikationshÃ¤ufigkeit, DatenÃ¼bertragung) erfasst und ausgewertet werden.   \n   - SchÃ¤tze ab, wie umfassend und detailliert die Auswertung jeweils ausfÃ¤llt. \n\n4. **Handlungsbedarf fÃ¼r den Betriebsrat**   \n   - Fasse zusammen, bei welchen Funktionen und Einsatzszenarien eine Betriebsvereinbarung zwingend erforderlich ist. \n\n5. **Weitere Mitbestimmungsrechte (Kurzhinweise)**   \n   - Wenn offensichtlich erkennbar ist, dass andere relevante Mitbestimmungsrechte nach BetrVG (z. B. Â§Â§ 80 ff. zur Informationspflicht) berÃ¼hrt sind, bewerte kurz, warum diese Software dieses Recht des Betriebsrats berÃ¼hren kÃ¶nnte. \n\nArbeite strukturiert mit klaren Ãœberschriften und Bullet-Points. Wo sinnvoll, nutze kurze Tabellen oder Zusammenfassungen zur Ãœbersicht. \n. Antworte auf deutsch.\nSoftware: \n"            ),            "role": roles.get("Gutachten"),        },        "initial_check_knowledge": {            "text": "Kennst du die Software '{name}'? Antworte ausschlieÃŸlich mit einem einzigen Wort: 'Ja' oder 'Nein'.",            "use_system_role": False,        },                "initial_llm_check": {            "text": (                "Erstelle eine kurze, technisch korrekte Beschreibung fÃ¼r die Software '{name}'. "                "Nutze Markdown mit Ãœberschriften, Listen oder Fettdruck, um den Text zu strukturieren. "                "ErlÃ¤utere, was sie tut und wie sie typischerweise eingesetzt wird."            ),            "role": roles.get("Gutachten"),        },    }    for name, data in prompt_data.items():        Prompt.objects.update_or_create(            name=name,            defaults={                "text": data["text"],                "role": data.get("role"),                "use_system_role": data.get("use_system_role", True),            },        )    # Angleiche den Prompt an die Seeds: KI-BegrÃ¼ndung inkl. Projekt/Software/Funktion/Unterfrage    ai_obj = Prompt.objects.get(name="anlage2_ai_verification_prompt")    ai_obj.text = (            " [SYSTEM]\n"            "Du bist Fachautor*in fÃ¼r ITâ€‘Mitbestimmung (Â§87 Abs. 1 Nr. 6 BetrVG)."            " BegrÃ¼nde prÃ¤gnant in 1â€“3 SÃ¤tzen, warum eine KIâ€‘Beteiligung plausibel ist.\n\n"            "Hinweise: Beziehe dich auf typische KIâ€‘Merkmale (z. B. Verarbeitung unstrukturierter Daten,"            " probabilistische/nichtâ€‘deterministische Verfahren, Mustererkennung, generative Modelle)."            " Wenn eine Unterfrage angegeben ist, argumentiere konkret zur Unterfrage; ist sie leer,"            " beziehe dich nur auf die Funktion.\n\n"            " [USER]\n"            "Projekt: {project_name}  \n"            "Software: {software_name}  \n"            "Funktion/Eigenschaft: {function_name}  \n"            "Unterfrage: \"{subquestion_text}\"\n\n"            "Aufgabe: Gib eine kurze BegrÃ¼ndung, warum hier eine KIâ€‘Komponente beteiligt ist oder beteiligt sein kann."        )    ai_obj.use_system_role = False    ai_obj.save(update_fields=["text", "use_system_role"])