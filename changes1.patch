diff --git a/core/admin.py b/core/admin.py
index b64365285e1c79bc855106c61783b274b03e6a86..d378371e1677c8e1d56cc9af1acb61772b95a455 100644
--- a/core/admin.py
+++ b/core/admin.py
@@ -150,51 +150,51 @@ class TileAdmin(admin.ModelAdmin):
 @admin.register(UserTileAccess)
 class UserTileAccessAdmin(admin.ModelAdmin):
     list_display = ("user", "tile")
 
 
 class AreaAdmin(admin.ModelAdmin):
     form = AreaAdminForm
     list_display = ("slug", "name", "image")
 
 
 class UserTileAccessInline(admin.TabularInline):
     model = UserTileAccess
     extra = 1
 
 
 class CustomUserAdmin(BaseUserAdmin):
     inlines = [UserTileAccessInline]
 
 
 admin.site.unregister(User)
 admin.site.register(User, CustomUserAdmin)
 
 
 @admin.register(Anlage2Function)
 class Anlage2FunctionAdmin(admin.ModelAdmin):
-    list_display = ("name",)
+    list_display = ("name", "detection_phrases")
 
 
 @admin.register(Anlage2FunctionResult)
 class Anlage2FunctionResultAdmin(admin.ModelAdmin):
     list_display = (
         "projekt",
         "funktion",
         "technisch_verfuegbar",
         "ki_beteiligung",
     )
 
 
 @admin.register(BVProjectFile)
 class BVProjectFileAdmin(admin.ModelAdmin):
     list_display = (
         "projekt",
         "anlage_nr",
         "manual_reviewed",
         "verhandlungsfaehig",
     )
     list_editable = ("manual_reviewed", "verhandlungsfaehig")
 
 
 # Registrierung der Modelle
 admin.site.register(Tile, TileAdmin)
diff --git a/core/forms.py b/core/forms.py
index 92c453dead7557091df7bbcb069746200545e4fa..650a37e4f34d1e906c4eaae6539706e3c565155f 100644
--- a/core/forms.py
+++ b/core/forms.py
@@ -344,65 +344,71 @@ class Anlage2ReviewForm(forms.Form):
         if not self.is_valid():
             return out
         fields = get_anlage2_fields()
         for func in Anlage2Function.objects.order_by("name"):
             item: dict[str, object] = {}
             for field, _ in fields:
                 item[field] = self.cleaned_data.get(f"func{func.id}_{field}", False)
             sub_dict: dict[str, dict] = {}
             for sub in func.anlage2subquestion_set.all().order_by("id"):
                 sub_item = {
                     field: self.cleaned_data.get(f"sub{sub.id}_{field}", False)
                     for field, _ in fields
                 }
                 sub_dict[str(sub.id)] = sub_item
             if sub_dict:
                 item["subquestions"] = sub_dict
             out["functions"][str(func.id)] = item
         return out
 
 
 class Anlage2FunctionForm(forms.ModelForm):
     """Formular für eine Funktion aus Anlage 2."""
 
     class Meta:
         model = Anlage2Function
-        fields = ["name"]
+        fields = ["name", "detection_phrases"]
         widgets = {
             "name": forms.TextInput(attrs={"class": "border rounded p-2"}),
+            "detection_phrases": Textarea(
+                attrs={"class": "border rounded p-2", "rows": 3}
+            ),
         }
 
 
 class Anlage2SubQuestionForm(forms.ModelForm):
     """Formular für eine Unterfrage zu Anlage 2."""
 
     class Meta:
         model = Anlage2SubQuestion
-        fields = ["frage_text"]
+        fields = ["frage_text", "detection_phrases"]
         labels = {"frage_text": "Frage"}
         widgets = {
             "frage_text": Textarea(attrs={"class": "border rounded p-2", "rows": 3}),
+            "detection_phrases": Textarea(
+                attrs={"class": "border rounded p-2", "rows": 3}
+            ),
         }
 
 
 class Anlage2FunctionImportForm(forms.Form):
     """Formular für den JSON-Import des Funktionskatalogs."""
 
     json_file = forms.FileField(
         label="JSON-Datei",
         widget=forms.ClearableFileInput(attrs={"class": "border rounded p-2"}),
     )
     clear_first = forms.BooleanField(
         required=False,
         label="Datenbank vorher leeren",
         widget=forms.CheckboxInput(attrs={"class": "mr-2"}),
     )
 
 
 class PromptImportForm(forms.Form):
     """Formular für den JSON-Import der Prompts."""
 
     json_file = forms.FileField(
         label="JSON-Datei der Prompts",
         widget=forms.ClearableFileInput(attrs={"class": "border rounded p-2"}),
     )
     clear_first = forms.BooleanField(
diff --git a/core/migrations/0007_anlage2function_detection_phrases_and_more.py b/core/migrations/000_anlage2function_detection_phrases_and_more.py
new file mode 100644
index 0000000000000000000000000000000000000000..8b72ef4e4cdf3fa30339eb54c3ec7af65fc91052
--- /dev/null
+++ b/core/migrations/0007_anlage2function_detection_phrases_and_more.py
@@ -0,0 +1,23 @@
+# Generated by Django 5.2.3 on 2025-07-02 07:47
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ("core", "0005_auto_20250701_2038"),
+    ]
+
+    operations = [
+        migrations.AddField(
+            model_name="anlage2function",
+            name="detection_phrases",
+            field=models.JSONField(blank=True, default=dict),
+        ),
+        migrations.AddField(
+            model_name="anlage2subquestion",
+            name="detection_phrases",
+            field=models.JSONField(blank=True, default=dict),
+        ),
+    ]
diff --git a/core/models.py b/core/models.py
index cf4449f50fb5f239953f175c26d8fef0c1bb1fd1..befda76648ea7c59558e7dceafba8a3f4b12783d 100644
--- a/core/models.py
+++ b/core/models.py
@@ -612,76 +612,78 @@ class UserTileAccess(models.Model):
 
     class Meta:
         unique_together = [("user", "tile")]
 
     def __str__(self) -> str:  # pragma: no cover - trivial
         return f"{self.user} -> {self.tile}"
 
 
 class UserAreaAccess(models.Model):
     """Verknüpfung zwischen Benutzer und Bereich."""
 
     user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
     area = models.ForeignKey(Area, on_delete=models.CASCADE)
 
     class Meta:
         unique_together = [("user", "area")]
 
     def __str__(self) -> str:  # pragma: no cover - trivial
         return f"{self.user} -> {self.area}"
 
 
 class Anlage2Function(models.Model):
     """Funktion aus Anlage 2."""
 
     name = models.CharField(max_length=200, unique=True)
+    detection_phrases = models.JSONField(default=dict, blank=True)
 
     class Meta:
         ordering = ["name"]
 
     def __str__(self) -> str:  # pragma: no cover - trivial
         return self.name
 
 
 class Anlage2FunctionResult(models.Model):
     """Speichert das Prüfergebnis einer Anlage-2-Funktion."""
 
     projekt = models.ForeignKey(BVProject, on_delete=models.CASCADE)
     funktion = models.ForeignKey(Anlage2Function, on_delete=models.CASCADE)
     technisch_verfuegbar = models.BooleanField(null=True)
     ki_beteiligung = models.BooleanField(null=True)
     raw_json = models.JSONField(null=True, blank=True)
     source = models.CharField(max_length=10, default="llm")
     created_at = models.DateTimeField(auto_now_add=True)
 
     class Meta:
         unique_together = [("projekt", "funktion")]
         ordering = ["funktion__name"]
 
     def __str__(self) -> str:  # pragma: no cover - trivial
         return f"{self.projekt} - {self.funktion}"
 
     def get_lookup_key(self) -> str:
         """Liefert den eindeutigen Lookup-Schlüssel für dieses Ergebnis."""
         sub_id = None
         if isinstance(self.raw_json, dict):
             sub_id = self.raw_json.get("subquestion_id")
         if sub_id:
             try:
                 sub = Anlage2SubQuestion.objects.get(pk=sub_id)
                 return f"{self.funktion.name}: {sub.frage_text}"
             except Anlage2SubQuestion.DoesNotExist:
                 pass
         return self.funktion.name
 
 
 class Anlage2SubQuestion(models.Model):
     """Teilfrage zu einer Anlage-2-Funktion."""
 
     funktion = models.ForeignKey(Anlage2Function, on_delete=models.CASCADE)
     frage_text = models.TextField()
+    detection_phrases = models.JSONField(default=dict, blank=True)
 
     class Meta:
         ordering = ["id"]
 
     def __str__(self) -> str:  # pragma: no cover - trivial
         return self.frage_text
diff --git a/templates/anlage2/function_form.html b/templates/anlage2/function_form.html
index 483ac7d24932a7b1f71365e10cbecd4d5e63c828..c4a158f6606e67764f6f5f8c98c9f8a0fb338567 100644
--- a/templates/anlage2/function_form.html
+++ b/templates/anlage2/function_form.html
@@ -1,37 +1,42 @@
 {% extends 'admin_base.html' %}
 {% block title %}{% if funktion %}Funktion bearbeiten{% else %}Neue Funktion{% endif %}{% endblock %}
 {% block admin_content %}
 <h1 class="text-2xl font-semibold mb-4">{% if funktion %}Funktion bearbeiten{% else %}Neue Funktion{% endif %}</h1>
 <form method="post" class="space-y-4">
     {% csrf_token %}
     {{ form.non_field_errors }}
     <div>
         {{ form.name.label_tag }}<br>
         {{ form.name }}
         {{ form.name.errors }}
     </div>
+    <div>
+        {{ form.detection_phrases.label_tag }}<br>
+        {{ form.detection_phrases }}
+        {{ form.detection_phrases.errors }}
+    </div>
     <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded mt-4">Speichern</button>
 </form>
 <script>
 </script>
 {% if funktion %}
 <h2 class="text-xl font-semibold mt-8 mb-2">Unterfragen</h2>
 <a href="{% url 'anlage2_subquestion_new' funktion.id %}" class="inline-block mb-2 px-3 py-1 bg-green-600 text-white rounded">Neue Unterfrage</a>
 <table class="min-w-full">
     <thead>
         <tr class="border-b text-left">
             <th class="py-2">Frage</th>
             <th class="py-2 text-center">Bearbeiten</th>
             <th class="py-2 text-center">Löschen</th>
         </tr>
     </thead>
     <tbody>
     {% for q in subquestions %}
         <tr class="border-b text-sm">
             <td class="py-1">{{ q.frage_text|truncatechars:80 }}</td>
             <td class="py-1 text-center">
                 <a href="{% url 'anlage2_subquestion_edit' q.id %}" class="px-2 py-1 bg-blue-600 text-white rounded">Bearbeiten</a>
             </td>
             <td class="py-1 text-center">
                 <form action="{% url 'anlage2_subquestion_delete' q.id %}" method="post" class="inline">
                     {% csrf_token %}
diff --git a/templates/anlage2/subquestion_form.html b/templates/anlage2/subquestion_form.html
index 5b23f2e963bc5b074966f513874db1329d3eda3e..f5a3f1c026400c2c4ade556d6683209b391e0be6 100644
--- a/templates/anlage2/subquestion_form.html
+++ b/templates/anlage2/subquestion_form.html
@@ -1,17 +1,22 @@
 {% extends 'admin_base.html' %}
 {% block title %}{% if subquestion %}Unterfrage bearbeiten{% else %}Neue Unterfrage{% endif %}{% endblock %}
 {% block admin_content %}
 <h1 class="text-2xl font-semibold mb-4">{% if subquestion %}Unterfrage bearbeiten{% else %}Neue Unterfrage{% endif %}</h1>
 <form method="post" class="space-y-4">
     {% csrf_token %}
     {{ form.non_field_errors }}
     <div>
         {{ form.frage_text.label_tag }}<br>
         {{ form.frage_text }}
         {{ form.frage_text.errors }}
     </div>
+    <div>
+        {{ form.detection_phrases.label_tag }}<br>
+        {{ form.detection_phrases }}
+        {{ form.detection_phrases.errors }}
+    </div>
     <script>
     </script>
     <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded">Speichern</button>
 </form>
 {% endblock %}
